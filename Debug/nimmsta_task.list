
nimmsta_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003314  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003510  08003510  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003510  08003510  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003510  08003510  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08003524  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08003524  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aef9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019a1  00000000  00000000  0002af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  0002c920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092c  00000000  00000000  0002d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ee34  00000000  00000000  0002de3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c582  00000000  00000000  0005cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d874  00000000  00000000  000691f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003120  00000000  00000000  00186a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00189b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080034b8 	.word	0x080034b8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080034b8 	.word	0x080034b8

080001fc <main>:
  * Initialization of System clock, GPIOs, Timer. A test tone is played after the initialization.
  *
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

  // Initialize system peripherals
  SYSTEM_INIT();
 8000200:	f000 f856 	bl	80002b0 <SYSTEM_INIT>
  // Issue test tone
  TIMER_TEST_TONE();
 8000204:	f000 f9f0 	bl	80005e8 <TIMER_TEST_TONE>
   * In the while() a PUSH_BUTTON_INTERRUPT flag is polled.
   * */
  while (1)
  {
		//Enter Low-power mode - STOP mode.
		STM_ENTER_LPM();
 8000208:	f000 f85e 	bl	80002c8 <STM_ENTER_LPM>


	    if(PUSH_BUTTON_INTERRUPT)
 800020c:	4b23      	ldr	r3, [pc, #140]	; (800029c <main+0xa0>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	b2db      	uxtb	r3, r3
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f8      	beq.n	8000208 <main+0xc>
	    {
		    //Load timer auto-reload register with note frequency
		    TIM15->ARR = TIM15_PWM_FREQ_C6;				//C6 Note frequency
 8000216:	4b22      	ldr	r3, [pc, #136]	; (80002a0 <main+0xa4>)
 8000218:	f643 32b1 	movw	r2, #15281	; 0x3bb1
 800021c:	62da      	str	r2, [r3, #44]	; 0x2c

			// Enable Buzzer-logic circuit
			HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	2102      	movs	r1, #2
 8000222:	4820      	ldr	r0, [pc, #128]	; (80002a4 <main+0xa8>)
 8000224:	f000 fe64 	bl	8000ef0 <HAL_GPIO_WritePin>
			// Enable H-bridge functioning
			HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022e:	481e      	ldr	r0, [pc, #120]	; (80002a8 <main+0xac>)
 8000230:	f000 fe5e 	bl	8000ef0 <HAL_GPIO_WritePin>

			// start Timer PWM
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000234:	2100      	movs	r1, #0
 8000236:	481d      	ldr	r0, [pc, #116]	; (80002ac <main+0xb0>)
 8000238:	f001 ff24 	bl	8002084 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	481b      	ldr	r0, [pc, #108]	; (80002ac <main+0xb0>)
 8000240:	f002 feca 	bl	8002fd8 <HAL_TIMEx_PWMN_Start>
			HAL_Delay(500);								//wait 500ms
 8000244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000248:	f000 fb8a 	bl	8000960 <HAL_Delay>

			TIM15->ARR = TIM15_PWM_FREQ_D6;				//D6 Note frequency
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <main+0xa4>)
 800024e:	f243 5231 	movw	r2, #13617	; 0x3531
 8000252:	62da      	str	r2, [r3, #44]	; 0x2c

			HAL_Delay(500);								//wait 500ms
 8000254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000258:	f000 fb82 	bl	8000960 <HAL_Delay>

			TIM15->ARR = TIM15_PWM_FREQ_E6;				//E6 Note frequency
 800025c:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <main+0xa4>)
 800025e:	f642 7262 	movw	r2, #12130	; 0x2f62
 8000262:	62da      	str	r2, [r3, #44]	; 0x2c

			HAL_Delay(500);								//wait 500ms
 8000264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000268:	f000 fb7a 	bl	8000960 <HAL_Delay>

			// Disable H-bridge
			HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000272:	480d      	ldr	r0, [pc, #52]	; (80002a8 <main+0xac>)
 8000274:	f000 fe3c 	bl	8000ef0 <HAL_GPIO_WritePin>

			//Stop Timer PWM
			HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8000278:	2100      	movs	r1, #0
 800027a:	480c      	ldr	r0, [pc, #48]	; (80002ac <main+0xb0>)
 800027c:	f002 f808 	bl	8002290 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000280:	2100      	movs	r1, #0
 8000282:	480a      	ldr	r0, [pc, #40]	; (80002ac <main+0xb0>)
 8000284:	f002 ff62 	bl	800314c <HAL_TIMEx_PWMN_Stop>

			// Disable Buzzer-logic circuit
			HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <main+0xa8>)
 800028e:	f000 fe2f 	bl	8000ef0 <HAL_GPIO_WritePin>

			PUSH_BUTTON_INTERRUPT = false;		//RESET push button flag
 8000292:	4b02      	ldr	r3, [pc, #8]	; (800029c <main+0xa0>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
		STM_ENTER_LPM();
 8000298:	e7b6      	b.n	8000208 <main+0xc>
 800029a:	bf00      	nop
 800029c:	20000074 	.word	0x20000074
 80002a0:	40014000 	.word	0x40014000
 80002a4:	48001000 	.word	0x48001000
 80002a8:	48000800 	.word	0x48000800
 80002ac:	20000028 	.word	0x20000028

080002b0 <SYSTEM_INIT>:
 * 			- System Clock setup
 * 			- GPIO setup
 * 			- Timer Setup
 * */
void SYSTEM_INIT()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	HAL_Init();
 80002b4:	f000 fadf 	bl	8000876 <HAL_Init>

	//Initialize clock
	SystemClock_Config();
 80002b8:	f000 f810 	bl	80002dc <SystemClock_Config>

	// Initialize GPIOs
	MX_GPIO_Init();
 80002bc:	f000 f916 	bl	80004ec <MX_GPIO_Init>

	//Initialize Timer
	MX_TIM15_Init();
 80002c0:	f000 f872 	bl	80003a8 <MX_TIM15_Init>

}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <STM_ENTER_LPM>:
 * 			- GPIO enabled for Interrupt
 * 			- WAKE-UP by External interrupt
 *
 * */
void STM_ENTER_LPM()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

	//Enter STOP_MODE 1 - LOW POWR REGULATOR for Lower power consumption. Trade-off is Delayed Wake-up time
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80002cc:	2101      	movs	r1, #1
 80002ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002d2:	f000 fe3d 	bl	8000f50 <HAL_PWR_EnterSTOPMode>
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @return value - None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b098      	sub	sp, #96	; 0x60
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 031c 	add.w	r3, r7, #28
 80002e6:	2244      	movs	r2, #68	; 0x44
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 f8b7 	bl	800345e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	f107 0308 	add.w	r3, r7, #8
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000300:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000304:	f000 fe5c 	bl	8000fc0 <HAL_PWREx_ControlVoltageScaling>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800030e:	f000 f9bd 	bl	800068c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000312:	2302      	movs	r3, #2
 8000314:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031c:	2340      	movs	r3, #64	; 0x40
 800031e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000320:	2300      	movs	r3, #0
 8000322:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	f107 031c 	add.w	r3, r7, #28
 8000328:	4618      	mov	r0, r3
 800032a:	f000 ff53 	bl	80011d4 <HAL_RCC_OscConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000334:	f000 f9aa 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000338:	230f      	movs	r3, #15
 800033a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033c:	2301      	movs	r3, #1
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034c:	f107 0308 	add.w	r3, r7, #8
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fb58 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800035e:	f000 f995 	bl	800068c <Error_Handler>
  }

  /*
   * Disable Low-speed External clock to use PC14 as a standard GPIO pin
   */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <SystemClock_Config+0xc8>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <SystemClock_Config+0xc8>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <SystemClock_Config+0xc8>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);			//Low-speed External Oscillator Switched OFF
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <SystemClock_Config+0xc8>)
 800037c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000380:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <SystemClock_Config+0xc8>)
 8000382:	f023 0301 	bic.w	r3, r3, #1
 8000386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <SystemClock_Config+0xc8>)
 800038c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <SystemClock_Config+0xc8>)
 8000392:	f023 0304 	bic.w	r3, r3, #4
 8000396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

}
 800039a:	bf00      	nop
 800039c:	3760      	adds	r7, #96	; 0x60
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <MX_TIM15_Init>:
	*
	* @param None
	* @retval None
  */
static void MX_TIM15_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b09a      	sub	sp, #104	; 0x68
 80003ac:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]
 80003da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	222c      	movs	r2, #44	; 0x2c
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f003 f83b 	bl	800345e <memset>

  htim15.Instance = TIM15;
 80003e8:	4b3e      	ldr	r3, [pc, #248]	; (80004e4 <MX_TIM15_Init+0x13c>)
 80003ea:	4a3f      	ldr	r2, [pc, #252]	; (80004e8 <MX_TIM15_Init+0x140>)
 80003ec:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80003ee:	4b3d      	ldr	r3, [pc, #244]	; (80004e4 <MX_TIM15_Init+0x13c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f4:	4b3b      	ldr	r3, [pc, #236]	; (80004e4 <MX_TIM15_Init+0x13c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 80003fa:	4b3a      	ldr	r3, [pc, #232]	; (80004e4 <MX_TIM15_Init+0x13c>)
 80003fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000400:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000402:	4b38      	ldr	r3, [pc, #224]	; (80004e4 <MX_TIM15_Init+0x13c>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 1;
 8000408:	4b36      	ldr	r3, [pc, #216]	; (80004e4 <MX_TIM15_Init+0x13c>)
 800040a:	2201      	movs	r2, #1
 800040c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800040e:	4b35      	ldr	r3, [pc, #212]	; (80004e4 <MX_TIM15_Init+0x13c>)
 8000410:	2280      	movs	r2, #128	; 0x80
 8000412:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000414:	4833      	ldr	r0, [pc, #204]	; (80004e4 <MX_TIM15_Init+0x13c>)
 8000416:	f001 fd7d 	bl	8001f14 <HAL_TIM_Base_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000420:	f000 f934 	bl	800068c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000428:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800042a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800042e:	4619      	mov	r1, r3
 8000430:	482c      	ldr	r0, [pc, #176]	; (80004e4 <MX_TIM15_Init+0x13c>)
 8000432:	f002 f8d7 	bl	80025e4 <HAL_TIM_ConfigClockSource>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800043c:	f000 f926 	bl	800068c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000440:	4828      	ldr	r0, [pc, #160]	; (80004e4 <MX_TIM15_Init+0x13c>)
 8000442:	f001 fdbe 	bl	8001fc2 <HAL_TIM_PWM_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800044c:	f000 f91e 	bl	800068c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000450:	2300      	movs	r3, #0
 8000452:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000454:	2300      	movs	r3, #0
 8000456:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800045c:	4619      	mov	r1, r3
 800045e:	4821      	ldr	r0, [pc, #132]	; (80004e4 <MX_TIM15_Init+0x13c>)
 8000460:	f002 fed2 	bl	8003208 <HAL_TIMEx_MasterConfigSynchronization>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800046a:	f000 f90f 	bl	800068c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800046e:	2360      	movs	r3, #96	; 0x60
 8000470:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000;								//Duty cycle = 50%
 8000472:	f241 3388 	movw	r3, #5000	; 0x1388
 8000476:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000478:	2300      	movs	r3, #0
 800047a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800047c:	2300      	movs	r3, #0
 800047e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000480:	2300      	movs	r3, #0
 8000482:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000488:	2300      	movs	r3, #0
 800048a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800048c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000490:	2200      	movs	r2, #0
 8000492:	4619      	mov	r1, r3
 8000494:	4813      	ldr	r0, [pc, #76]	; (80004e4 <MX_TIM15_Init+0x13c>)
 8000496:	f001 ff91 	bl	80023bc <HAL_TIM_PWM_ConfigChannel>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80004a0:	f000 f8f4 	bl	800068c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;								// Dead time insertion for complementary PWM
 80004b0:	230a      	movs	r3, #10
 80004b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	4807      	ldr	r0, [pc, #28]	; (80004e4 <MX_TIM15_Init+0x13c>)
 80004c8:	f002 ff26 	bl	8003318 <HAL_TIMEx_ConfigBreakDeadTime>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80004d2:	f000 f8db 	bl	800068c <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim15);
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <MX_TIM15_Init+0x13c>)
 80004d8:	f000 f926 	bl	8000728 <HAL_TIM_MspPostInit>

}
 80004dc:	bf00      	nop
 80004de:	3768      	adds	r7, #104	; 0x68
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000028 	.word	0x20000028
 80004e8:	40014000 	.word	0x40014000

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000502:	4b36      	ldr	r3, [pc, #216]	; (80005dc <MX_GPIO_Init+0xf0>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a35      	ldr	r2, [pc, #212]	; (80005dc <MX_GPIO_Init+0xf0>)
 8000508:	f043 0310 	orr.w	r3, r3, #16
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b33      	ldr	r3, [pc, #204]	; (80005dc <MX_GPIO_Init+0xf0>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0310 	and.w	r3, r3, #16
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b30      	ldr	r3, [pc, #192]	; (80005dc <MX_GPIO_Init+0xf0>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4a2f      	ldr	r2, [pc, #188]	; (80005dc <MX_GPIO_Init+0xf0>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <MX_GPIO_Init+0xf0>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000532:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <MX_GPIO_Init+0xf0>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a29      	ldr	r2, [pc, #164]	; (80005dc <MX_GPIO_Init+0xf0>)
 8000538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b27      	ldr	r3, [pc, #156]	; (80005dc <MX_GPIO_Init+0xf0>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800054a:	f000 fddd 	bl	8001108 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2102      	movs	r1, #2
 8000552:	4823      	ldr	r0, [pc, #140]	; (80005e0 <MX_GPIO_Init+0xf4>)
 8000554:	f000 fccc 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4821      	ldr	r0, [pc, #132]	; (80005e4 <MX_GPIO_Init+0xf8>)
 8000560:	f000 fcc6 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CPU_BUZZER_DISABLE_OUT_Pin */
  GPIO_InitStruct.Pin = CPU_BUZZER_DISABLE_OUT_Pin;
 8000564:	2302      	movs	r3, #2
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CPU_BUZZER_DISABLE_OUT_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	4819      	ldr	r0, [pc, #100]	; (80005e0 <MX_GPIO_Init+0xf4>)
 800057c:	f000 fb26 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_BUZZER_SLEEP_OUT_Pin */

  // Configure GPIO pin output level
  HAL_GPIO_WritePin(GPIOC, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2102      	movs	r1, #2
 8000584:	4817      	ldr	r0, [pc, #92]	; (80005e4 <MX_GPIO_Init+0xf8>)
 8000586:	f000 fcb3 	bl	8000ef0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = CPU_BUZZER_SLEEP_OUT_Pin;
 800058a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800058e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CPU_BUZZER_SLEEP_OUT_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4619      	mov	r1, r3
 80005a2:	4810      	ldr	r0, [pc, #64]	; (80005e4 <MX_GPIO_Init+0xf8>)
 80005a4:	f000 fb12 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_Buttom_Pin */
  GPIO_InitStruct.Pin = Push_Buttom_Pin;
 80005a8:	2320      	movs	r3, #32
 80005aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Push_Buttom_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	4619      	mov	r1, r3
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <MX_GPIO_Init+0xf8>)
 80005be:	f000 fb05 	bl	8000bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2017      	movs	r0, #23
 80005c8:	f000 fac9 	bl	8000b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005cc:	2017      	movs	r0, #23
 80005ce:	f000 fae2 	bl	8000b96 <HAL_NVIC_EnableIRQ>

}
 80005d2:	bf00      	nop
 80005d4:	3720      	adds	r7, #32
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000
 80005e0:	48001000 	.word	0x48001000
 80005e4:	48000800 	.word	0x48000800

080005e8 <TIMER_TEST_TONE>:
 * @brief Function to generate test tone for 880 Hz on startup
  * @param None
  * @retval None
  */
void TIMER_TEST_TONE()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	//Load timer auto-reload register with test-tone frequency
	TIM15->ARR = TIM15_PWM_FREQ_880;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <TIMER_TEST_TONE+0x64>)
 80005ee:	f244 7205 	movw	r2, #18181	; 0x4705
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Buzzer-logic circuit
	HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2102      	movs	r1, #2
 80005f8:	4815      	ldr	r0, [pc, #84]	; (8000650 <TIMER_TEST_TONE+0x68>)
 80005fa:	f000 fc79 	bl	8000ef0 <HAL_GPIO_WritePin>
	// Enable H-bridge functioning
	HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <TIMER_TEST_TONE+0x6c>)
 8000606:	f000 fc73 	bl	8000ef0 <HAL_GPIO_WritePin>


	// start Timer PWM
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <TIMER_TEST_TONE+0x70>)
 800060e:	f001 fd39 	bl	8002084 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8000612:	2100      	movs	r1, #0
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <TIMER_TEST_TONE+0x70>)
 8000616:	f002 fcdf 	bl	8002fd8 <HAL_TIMEx_PWMN_Start>

	HAL_Delay(1000); 								//wait 1sec
 800061a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061e:	f000 f99f 	bl	8000960 <HAL_Delay>

	// Disable H-bridge
	HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000628:	480a      	ldr	r0, [pc, #40]	; (8000654 <TIMER_TEST_TONE+0x6c>)
 800062a:	f000 fc61 	bl	8000ef0 <HAL_GPIO_WritePin>

	// stop Timer PWM
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <TIMER_TEST_TONE+0x70>)
 8000632:	f001 fe2d 	bl	8002290 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000636:	2100      	movs	r1, #0
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <TIMER_TEST_TONE+0x70>)
 800063a:	f002 fd87 	bl	800314c <HAL_TIMEx_PWMN_Stop>

	// Disable Buzzer-logic circuit
	HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2102      	movs	r1, #2
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <TIMER_TEST_TONE+0x68>)
 8000644:	f000 fc54 	bl	8000ef0 <HAL_GPIO_WritePin>


	return;
 8000648:	bf00      	nop
}
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40014000 	.word	0x40014000
 8000650:	48001000 	.word	0x48001000
 8000654:	48000800 	.word	0x48000800
 8000658:	20000028 	.word	0x20000028

0800065c <HAL_GPIO_EXTI_Callback>:
/*
 * brief@  GPIO_PUSH_BUTTON_PIN interrupt handler
 * retval None
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  //Check if interrupt occurred at the right PIN
  if(GPIO_Pin == Push_Buttom_Pin)
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	2b20      	cmp	r3, #32
 800066a:	d107      	bne.n	800067c <HAL_GPIO_EXTI_Callback+0x20>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);  //clears wake-up flag
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_GPIO_EXTI_Callback+0x28>)
 800066e:	221f      	movs	r2, #31
 8000670:	619a      	str	r2, [r3, #24]

	  //Re-initialize system peripherals
	  SYSTEM_INIT();
 8000672:	f7ff fe1d 	bl	80002b0 <SYSTEM_INIT>

	  //Set button interrupt flag
	  PUSH_BUTTON_INTERRUPT = true;
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
  }

}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40007000 	.word	0x40007000
 8000688:	20000074 	.word	0x20000074

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  break;
 8000694:	bf00      	nop
  }
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_MspInit+0x44>)
 80006a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_MspInit+0x44>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6613      	str	r3, [r2, #96]	; 0x60
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x44>)
 80006b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x44>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x44>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x44>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <HAL_TIM_Base_MspInit+0x38>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d10b      	bne.n	8000712 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_TIM_Base_MspInit+0x3c>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fe:	4a09      	ldr	r2, [pc, #36]	; (8000724 <HAL_TIM_Base_MspInit+0x3c>)
 8000700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000704:	6613      	str	r3, [r2, #96]	; 0x60
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <HAL_TIM_Base_MspInit+0x3c>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40014000 	.word	0x40014000
 8000724:	40021000 	.word	0x40021000

08000728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <HAL_TIM_MspPostInit+0x68>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d11e      	bne.n	8000788 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_TIM_MspPostInit+0x6c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <HAL_TIM_MspPostInit+0x6c>)
 8000750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_TIM_MspPostInit+0x6c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000762:	f000 fcd1 	bl	8001108 <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration
    PG10     ------> TIM15_CH1
    PG9     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000766:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800076a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000778:	230e      	movs	r3, #14
 800077a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <HAL_TIM_MspPostInit+0x70>)
 8000784:	f000 fa22 	bl	8000bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40014000 	.word	0x40014000
 8000794:	40021000 	.word	0x40021000
 8000798:	48001800 	.word	0x48001800

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 f89a 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Push_Buttom_Pin);
 80007f4:	2020      	movs	r0, #32
 80007f6:	f000 fb93 	bl	8000f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <SystemInit+0x20>)
 8000806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <SystemInit+0x20>)
 800080c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800085c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000828:	f7ff ffea 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	; (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	; (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000852:	f002 fe0d 	bl	8003470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000856:	f7ff fcd1 	bl	80001fc <main>

0800085a <LoopForever>:

LoopForever:
    b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800085c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000868:	08003518 	.word	0x08003518
  ldr r2, =_sbss
 800086c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000870:	2000007c 	.word	0x2000007c

08000874 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_IRQHandler>

08000876 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800087c:	2300      	movs	r3, #0
 800087e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 f961 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000886:	200f      	movs	r0, #15
 8000888:	f000 f80e 	bl	80008a8 <HAL_InitTick>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	e001      	b.n	800089c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000898:	f7ff ff02 	bl	80006a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800089c:	79fb      	ldrb	r3, [r7, #7]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <HAL_InitTick+0x6c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d023      	beq.n	8000904 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_InitTick+0x70>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <HAL_InitTick+0x6c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f96d 	bl	8000bb2 <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10f      	bne.n	80008fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d809      	bhi.n	80008f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f000 f937 	bl	8000b5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008f0:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_InitTick+0x74>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
 80008f6:	e007      	b.n	8000908 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	e004      	b.n	8000908 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	73fb      	strb	r3, [r7, #15]
 8000902:	e001      	b.n	8000908 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000008 	.word	0x20000008
 8000918:	20000000 	.word	0x20000000
 800091c:	20000004 	.word	0x20000004

08000920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008
 8000944:	20000078 	.word	0x20000078

08000948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000078 	.word	0x20000078

08000960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000968:	f7ff ffee 	bl	8000948 <HAL_GetTick>
 800096c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000978:	d005      	beq.n	8000986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_Delay+0x44>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000986:	bf00      	nop
 8000988:	f7ff ffde 	bl	8000948 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	429a      	cmp	r2, r3
 8000996:	d8f7      	bhi.n	8000988 <HAL_Delay+0x28>
  {
  }
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000008 	.word	0x20000008

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4907      	ldr	r1, [pc, #28]	; (8000a44 <__NVIC_EnableIRQ+0x38>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f7ff ff8e 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff29 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff3e 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff8e 	bl	8000a9c <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5d 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff31 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa2 	bl	8000b04 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bda:	e166      	b.n	8000eaa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 8158 	beq.w	8000ea4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d005      	beq.n	8000c0c <HAL_GPIO_Init+0x40>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d130      	bne.n	8000c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c42:	2201      	movs	r2, #1
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	091b      	lsrs	r3, r3, #4
 8000c58:	f003 0201 	and.w	r2, r3, #1
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d017      	beq.n	8000caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d123      	bne.n	8000cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	220f      	movs	r2, #15
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	691a      	ldr	r2, [r3, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	6939      	ldr	r1, [r7, #16]
 8000cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0203 	and.w	r2, r3, #3
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 80b2 	beq.w	8000ea4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d40:	4b61      	ldr	r3, [pc, #388]	; (8000ec8 <HAL_GPIO_Init+0x2fc>)
 8000d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d44:	4a60      	ldr	r2, [pc, #384]	; (8000ec8 <HAL_GPIO_Init+0x2fc>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4c:	4b5e      	ldr	r3, [pc, #376]	; (8000ec8 <HAL_GPIO_Init+0x2fc>)
 8000d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d58:	4a5c      	ldr	r2, [pc, #368]	; (8000ecc <HAL_GPIO_Init+0x300>)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	3302      	adds	r3, #2
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d82:	d02b      	beq.n	8000ddc <HAL_GPIO_Init+0x210>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a52      	ldr	r2, [pc, #328]	; (8000ed0 <HAL_GPIO_Init+0x304>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d025      	beq.n	8000dd8 <HAL_GPIO_Init+0x20c>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <HAL_GPIO_Init+0x308>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d01f      	beq.n	8000dd4 <HAL_GPIO_Init+0x208>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a50      	ldr	r2, [pc, #320]	; (8000ed8 <HAL_GPIO_Init+0x30c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d019      	beq.n	8000dd0 <HAL_GPIO_Init+0x204>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <HAL_GPIO_Init+0x310>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d013      	beq.n	8000dcc <HAL_GPIO_Init+0x200>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a4e      	ldr	r2, [pc, #312]	; (8000ee0 <HAL_GPIO_Init+0x314>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d00d      	beq.n	8000dc8 <HAL_GPIO_Init+0x1fc>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a4d      	ldr	r2, [pc, #308]	; (8000ee4 <HAL_GPIO_Init+0x318>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d007      	beq.n	8000dc4 <HAL_GPIO_Init+0x1f8>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a4c      	ldr	r2, [pc, #304]	; (8000ee8 <HAL_GPIO_Init+0x31c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d101      	bne.n	8000dc0 <HAL_GPIO_Init+0x1f4>
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	e00e      	b.n	8000dde <HAL_GPIO_Init+0x212>
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	e00c      	b.n	8000dde <HAL_GPIO_Init+0x212>
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	e00a      	b.n	8000dde <HAL_GPIO_Init+0x212>
 8000dc8:	2305      	movs	r3, #5
 8000dca:	e008      	b.n	8000dde <HAL_GPIO_Init+0x212>
 8000dcc:	2304      	movs	r3, #4
 8000dce:	e006      	b.n	8000dde <HAL_GPIO_Init+0x212>
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e004      	b.n	8000dde <HAL_GPIO_Init+0x212>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_Init+0x212>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <HAL_GPIO_Init+0x212>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	f002 0203 	and.w	r2, r2, #3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dee:	4937      	ldr	r1, [pc, #220]	; (8000ecc <HAL_GPIO_Init+0x300>)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e20:	4a32      	ldr	r2, [pc, #200]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e4a:	4a28      	ldr	r2, [pc, #160]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f47f ae91 	bne.w	8000bdc <HAL_GPIO_Init+0x10>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	48000800 	.word	0x48000800
 8000ed8:	48000c00 	.word	0x48000c00
 8000edc:	48001000 	.word	0x48001000
 8000ee0:	48001400 	.word	0x48001400
 8000ee4:	48001800 	.word	0x48001800
 8000ee8:	48001c00 	.word	0x48001c00
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f2c:	695a      	ldr	r2, [r3, #20]
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);				//clears interrupt flag
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);				//calls interrupt handler
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fb8c 	bl	800065c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40010400 	.word	0x40010400

08000f50 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f62:	d104      	bne.n	8000f6e <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f908 	bl	800117c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8000f6c:	e003      	b.n	8000f76 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f8d9 	bl	8001128 <HAL_PWREx_EnterSTOP0Mode>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f90:	d102      	bne.n	8000f98 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f96:	e00b      	b.n	8000fb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fa6:	d102      	bne.n	8000fae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fac:	e000      	b.n	8000fb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000fae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d141      	bne.n	8001052 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fce:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fda:	d131      	bne.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fdc:	4b47      	ldr	r3, [pc, #284]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe2:	4a46      	ldr	r2, [pc, #280]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff4:	4a41      	ldr	r2, [pc, #260]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000ffc:	4b40      	ldr	r3, [pc, #256]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2232      	movs	r2, #50	; 0x32
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	4a3f      	ldr	r2, [pc, #252]	; (8001104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	0c9b      	lsrs	r3, r3, #18
 800100e:	3301      	adds	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001012:	e002      	b.n	800101a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3b01      	subs	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800101a:	4b38      	ldr	r3, [pc, #224]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001026:	d102      	bne.n	800102e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f2      	bne.n	8001014 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800102e:	4b33      	ldr	r3, [pc, #204]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103a:	d158      	bne.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e057      	b.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001040:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001046:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800104c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001050:	e04d      	b.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001058:	d141      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001066:	d131      	bne.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2232      	movs	r2, #50	; 0x32
 800108e:	fb02 f303 	mul.w	r3, r2, r3
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	0c9b      	lsrs	r3, r3, #18
 800109a:	3301      	adds	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800109e:	e002      	b.n	80010a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b2:	d102      	bne.n	80010ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f2      	bne.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c6:	d112      	bne.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e011      	b.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010dc:	e007      	b.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40007000 	.word	0x40007000
 8001100:	20000000 	.word	0x20000000
 8001104:	431bde83 	.word	0x431bde83

08001108 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_PWREx_EnableVddIO2+0x1c>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001116:	6053      	str	r3, [r2, #4]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40007000 	.word	0x40007000

08001128 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001138:	f023 0307 	bic.w	r3, r3, #7
 800113c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d101      	bne.n	8001154 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001150:	bf30      	wfi
 8001152:	e002      	b.n	800115a <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001154:	bf40      	sev
    __WFE();
 8001156:	bf20      	wfe
    __WFE();
 8001158:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001160:	f023 0304 	bic.w	r3, r3, #4
 8001164:	6113      	str	r3, [r2, #16]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40007000 	.word	0x40007000
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 0307 	bic.w	r3, r3, #7
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80011a8:	bf30      	wfi
 80011aa:	e002      	b.n	80011b2 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80011ac:	bf40      	sev
    __WFE();
 80011ae:	bf20      	wfe
    __WFE();
 80011b0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6113      	str	r3, [r2, #16]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f000 bc08 	b.w	80019f8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e8:	4b96      	ldr	r3, [pc, #600]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f2:	4b94      	ldr	r3, [pc, #592]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80e4 	beq.w	80013d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <HAL_RCC_OscConfig+0x4c>
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b0c      	cmp	r3, #12
 8001214:	f040 808b 	bne.w	800132e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2b01      	cmp	r3, #1
 800121c:	f040 8087 	bne.w	800132e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001220:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_OscConfig+0x64>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e3df      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1a      	ldr	r2, [r3, #32]
 800123c:	4b81      	ldr	r3, [pc, #516]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <HAL_RCC_OscConfig+0x7e>
 8001248:	4b7e      	ldr	r3, [pc, #504]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001250:	e005      	b.n	800125e <HAL_RCC_OscConfig+0x8a>
 8001252:	4b7c      	ldr	r3, [pc, #496]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800125e:	4293      	cmp	r3, r2
 8001260:	d223      	bcs.n	80012aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fd94 	bl	8001d94 <RCC_SetFlashLatencyFromMSIRange>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e3c0      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001276:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a72      	ldr	r2, [pc, #456]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b70      	ldr	r3, [pc, #448]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	496d      	ldr	r1, [pc, #436]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001294:	4b6b      	ldr	r3, [pc, #428]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	4968      	ldr	r1, [pc, #416]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
 80012a8:	e025      	b.n	80012f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012aa:	4b66      	ldr	r3, [pc, #408]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a65      	ldr	r2, [pc, #404]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b63      	ldr	r3, [pc, #396]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4960      	ldr	r1, [pc, #384]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c8:	4b5e      	ldr	r3, [pc, #376]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	495b      	ldr	r1, [pc, #364]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d109      	bne.n	80012f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fd54 	bl	8001d94 <RCC_SetFlashLatencyFromMSIRange>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e380      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012f6:	f000 fcc1 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b51      	ldr	r3, [pc, #324]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	4950      	ldr	r1, [pc, #320]	; (8001448 <HAL_RCC_OscConfig+0x274>)
 8001308:	5ccb      	ldrb	r3, [r1, r3]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	4a4e      	ldr	r2, [pc, #312]	; (800144c <HAL_RCC_OscConfig+0x278>)
 8001314:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001316:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <HAL_RCC_OscConfig+0x27c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fac4 	bl	80008a8 <HAL_InitTick>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d052      	beq.n	80013d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	e364      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d032      	beq.n	800139c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a42      	ldr	r2, [pc, #264]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001342:	f7ff fb01 	bl	8000948 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134a:	f7ff fafd 	bl	8000948 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e34d      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001368:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a35      	ldr	r2, [pc, #212]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4930      	ldr	r1, [pc, #192]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	492b      	ldr	r1, [pc, #172]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
 800139a:	e01a      	b.n	80013d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a28      	ldr	r2, [pc, #160]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a8:	f7ff face 	bl	8000948 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b0:	f7ff faca 	bl	8000948 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e31a      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1dc>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d073      	beq.n	80014c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x21c>
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d10e      	bne.n	8001408 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d10b      	bne.n	8001408 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d063      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2f0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d15f      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e2f7      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d106      	bne.n	8001420 <HAL_RCC_OscConfig+0x24c>
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e025      	b.n	800146c <HAL_RCC_OscConfig+0x298>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001428:	d114      	bne.n	8001454 <HAL_RCC_OscConfig+0x280>
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a02      	ldr	r2, [pc, #8]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e013      	b.n	800146c <HAL_RCC_OscConfig+0x298>
 8001444:	40021000 	.word	0x40021000
 8001448:	080034d0 	.word	0x080034d0
 800144c:	20000000 	.word	0x20000000
 8001450:	20000004 	.word	0x20000004
 8001454:	4ba0      	ldr	r3, [pc, #640]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a9f      	ldr	r2, [pc, #636]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b9d      	ldr	r3, [pc, #628]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a9c      	ldr	r2, [pc, #624]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fa68 	bl	8000948 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fa64 	bl	8000948 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e2b4      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148e:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x2a8>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fa54 	bl	8000948 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fa50 	bl	8000948 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e2a0      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b6:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2d0>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d060      	beq.n	8001594 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x310>
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d119      	bne.n	8001512 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d116      	bne.n	8001512 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e4:	4b7c      	ldr	r3, [pc, #496]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x328>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e27d      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b76      	ldr	r3, [pc, #472]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	4973      	ldr	r1, [pc, #460]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001510:	e040      	b.n	8001594 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d023      	beq.n	8001562 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151a:	4b6f      	ldr	r3, [pc, #444]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6e      	ldr	r2, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fa0f 	bl	8000948 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fa0b 	bl	8000948 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e25b      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001540:	4b65      	ldr	r3, [pc, #404]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	495f      	ldr	r1, [pc, #380]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
 8001560:	e018      	b.n	8001594 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a5c      	ldr	r2, [pc, #368]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff f9eb 	bl	8000948 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff f9e7 	bl	8000948 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e237      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d03c      	beq.n	800161a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	4a4a      	ldr	r2, [pc, #296]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff f9c6 	bl	8000948 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff f9c2 	bl	8000948 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e212      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ef      	beq.n	80015c0 <HAL_RCC_OscConfig+0x3ec>
 80015e0:	e01b      	b.n	800161a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e8:	4a3b      	ldr	r2, [pc, #236]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff f9a9 	bl	8000948 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff f9a5 	bl	8000948 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1f5      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800160e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ef      	bne.n	80015fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80a6 	beq.w	8001774 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10d      	bne.n	8001654 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001642:	6593      	str	r3, [r2, #88]	; 0x58
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001650:	2301      	movs	r3, #1
 8001652:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <HAL_RCC_OscConfig+0x508>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d118      	bne.n	8001692 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_RCC_OscConfig+0x508>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_RCC_OscConfig+0x508>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166c:	f7ff f96c 	bl	8000948 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001674:	f7ff f968 	bl	8000948 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1b8      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_RCC_OscConfig+0x508>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d108      	bne.n	80016ac <HAL_RCC_OscConfig+0x4d8>
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800169c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016aa:	e029      	b.n	8001700 <HAL_RCC_OscConfig+0x52c>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d115      	bne.n	80016e0 <HAL_RCC_OscConfig+0x50c>
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ca:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x52c>
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40007000 	.word	0x40007000
 80016e0:	4b9d      	ldr	r3, [pc, #628]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e6:	4a9c      	ldr	r2, [pc, #624]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f0:	4b99      	ldr	r3, [pc, #612]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	4a98      	ldr	r2, [pc, #608]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d016      	beq.n	8001736 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff f91e 	bl	8000948 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff f91a 	bl	8000948 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e168      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001726:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0ed      	beq.n	8001710 <HAL_RCC_OscConfig+0x53c>
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff f907 	bl	8000948 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff f903 	bl	8000948 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e151      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001754:	4b80      	ldr	r3, [pc, #512]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ed      	bne.n	800173e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001762:	7ffb      	ldrb	r3, [r7, #31]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001768:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	4a7a      	ldr	r2, [pc, #488]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 800176e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001772:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b00      	cmp	r3, #0
 800177e:	d03c      	beq.n	80017fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001788:	4b73      	ldr	r3, [pc, #460]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 800178a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800178e:	4a72      	ldr	r2, [pc, #456]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff f8d6 	bl	8000948 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017a0:	f7ff f8d2 	bl	8000948 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e122      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017b2:	4b69      	ldr	r3, [pc, #420]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80017b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ef      	beq.n	80017a0 <HAL_RCC_OscConfig+0x5cc>
 80017c0:	e01b      	b.n	80017fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017c2:	4b65      	ldr	r3, [pc, #404]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80017c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017c8:	4a63      	ldr	r2, [pc, #396]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff f8b9 	bl	8000948 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017da:	f7ff f8b5 	bl	8000948 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e105      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017ec:	4b5a      	ldr	r3, [pc, #360]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80017ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ef      	bne.n	80017da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80f9 	beq.w	80019f6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	2b02      	cmp	r3, #2
 800180a:	f040 80cf 	bne.w	80019ac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800180e:	4b52      	ldr	r3, [pc, #328]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f003 0203 	and.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	429a      	cmp	r2, r3
 8001820:	d12c      	bne.n	800187c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	3b01      	subs	r3, #1
 800182e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d123      	bne.n	800187c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d11b      	bne.n	800187c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d113      	bne.n	800187c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d109      	bne.n	800187c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	3b01      	subs	r3, #1
 8001876:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d071      	beq.n	8001960 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d068      	beq.n	8001954 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d105      	bne.n	800189a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800188e:	4b32      	ldr	r3, [pc, #200]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e0ac      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800189e:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a2d      	ldr	r2, [pc, #180]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80018a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018aa:	f7ff f84d 	bl	8000948 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff f849 	bl	8000948 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e099      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <HAL_RCC_OscConfig+0x788>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018e0:	3a01      	subs	r2, #1
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	4311      	orrs	r1, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018ea:	0212      	lsls	r2, r2, #8
 80018ec:	4311      	orrs	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018f2:	0852      	lsrs	r2, r2, #1
 80018f4:	3a01      	subs	r2, #1
 80018f6:	0552      	lsls	r2, r2, #21
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018fe:	0852      	lsrs	r2, r2, #1
 8001900:	3a01      	subs	r2, #1
 8001902:	0652      	lsls	r2, r2, #25
 8001904:	4311      	orrs	r1, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800190a:	06d2      	lsls	r2, r2, #27
 800190c:	430a      	orrs	r2, r1
 800190e:	4912      	ldr	r1, [pc, #72]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001910:	4313      	orrs	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800192c:	f7ff f80c 	bl	8000948 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f808 	bl	8000948 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e058      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <HAL_RCC_OscConfig+0x784>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001952:	e050      	b.n	80019f6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e04f      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
 8001958:	40021000 	.word	0x40021000
 800195c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d144      	bne.n	80019f6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001976:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001984:	f7fe ffe0 	bl	8000948 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7fe ffdc 	bl	8000948 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e02c      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x7b8>
 80019aa:	e024      	b.n	80019f6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d01f      	beq.n	80019f2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 80019b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7fe ffc3 	bl	8000948 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7fe ffbf 	bl	8000948 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e00f      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	4905      	ldr	r1, [pc, #20]	; (8001a00 <HAL_RCC_OscConfig+0x82c>)
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_RCC_OscConfig+0x830>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	60cb      	str	r3, [r1, #12]
 80019f0:	e001      	b.n	80019f6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	feeefffc 	.word	0xfeeefffc

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e11d      	b.n	8001c5c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b90      	ldr	r3, [pc, #576]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b8d      	ldr	r3, [pc, #564]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 020f 	bic.w	r2, r3, #15
 8001a36:	498b      	ldr	r1, [pc, #556]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b89      	ldr	r3, [pc, #548]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e105      	b.n	8001c5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d010      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4b81      	ldr	r3, [pc, #516]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d908      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b7e      	ldr	r3, [pc, #504]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	497b      	ldr	r1, [pc, #492]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d079      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d11e      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	4b75      	ldr	r3, [pc, #468]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0dc      	b.n	8001c5c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001aa2:	f000 f9d1 	bl	8001e48 <RCC_GetSysClockFreqFromPLLSource>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a70      	ldr	r2, [pc, #448]	; (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d946      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001aae:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d140      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001aba:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ac2:	4a69      	ldr	r2, [pc, #420]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e035      	b.n	8001b3c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad8:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d115      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0b9      	b.n	8001c5c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af0:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0ad      	b.n	8001c5c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0a5      	b.n	8001c5c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001b10:	f000 f8b4 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a55      	ldr	r2, [pc, #340]	; (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d90f      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b1c:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b28:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b30:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b36:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b3c:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 0203 	bic.w	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4947      	ldr	r1, [pc, #284]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b4e:	f7fe fefb 	bl	8000948 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b56:	f7fe fef7 	bl	8000948 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e077      	b.n	8001c5c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6c:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 020c 	and.w	r2, r3, #12
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d1eb      	bne.n	8001b56 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b80      	cmp	r3, #128	; 0x80
 8001b82:	d105      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a37      	ldr	r2, [pc, #220]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b8e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d010      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d208      	bcs.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	492b      	ldr	r1, [pc, #172]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d210      	bcs.n	8001bee <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 020f 	bic.w	r2, r3, #15
 8001bd4:	4923      	ldr	r1, [pc, #140]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e036      	b.n	8001c5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d008      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4918      	ldr	r1, [pc, #96]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d009      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4910      	ldr	r1, [pc, #64]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c2c:	f000 f826 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <HAL_RCC_ClockConfig+0x268>)
 8001c3e:	5ccb      	ldrb	r3, [r1, r3]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x26c>)
 8001c4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x270>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fe29 	bl	80008a8 <HAL_InitTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	73fb      	strb	r3, [r7, #15]

  return status;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	04c4b400 	.word	0x04c4b400
 8001c70:	080034d0 	.word	0x080034d0
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c94:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d121      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d11e      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cbc:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e005      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cd8:	4a2b      	ldr	r2, [pc, #172]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d102      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	e004      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d134      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d003      	beq.n	8001d22 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d003      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0xac>
 8001d20:	e005      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d24:	617b      	str	r3, [r7, #20]
      break;
 8001d26:	e005      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d2a:	617b      	str	r3, [r7, #20]
      break;
 8001d2c:	e002      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	617b      	str	r3, [r7, #20]
      break;
 8001d32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3301      	adds	r3, #1
 8001d40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	fb03 f202 	mul.w	r2, r3, r2
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	0e5b      	lsrs	r3, r3, #25
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	3301      	adds	r3, #1
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d74:	69bb      	ldr	r3, [r7, #24]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	080034e0 	.word	0x080034e0
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	007a1200 	.word	0x007a1200

08001d94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dac:	f7ff f8e8 	bl	8000f80 <HAL_PWREx_GetVoltageRange>
 8001db0:	6178      	str	r0, [r7, #20]
 8001db2:	e014      	b.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4a21      	ldr	r2, [pc, #132]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dcc:	f7ff f8d8 	bl	8000f80 <HAL_PWREx_GetVoltageRange>
 8001dd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de4:	d10b      	bne.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b80      	cmp	r3, #128	; 0x80
 8001dea:	d913      	bls.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2ba0      	cmp	r3, #160	; 0xa0
 8001df0:	d902      	bls.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001df2:	2302      	movs	r3, #2
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	e00d      	b.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df8:	2301      	movs	r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e00a      	b.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b7f      	cmp	r3, #127	; 0x7f
 8001e02:	d902      	bls.n	8001e0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	e004      	b.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b70      	cmp	r3, #112	; 0x70
 8001e0e:	d101      	bne.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e10:	2301      	movs	r3, #1
 8001e12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 020f 	bic.w	r2, r3, #15
 8001e1c:	4909      	ldr	r1, [pc, #36]	; (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40022000 	.word	0x40022000

08001e48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d00b      	beq.n	8001e76 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d825      	bhi.n	8001eb0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d008      	beq.n	8001e7c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d11f      	bne.n	8001eb0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e72:	613b      	str	r3, [r7, #16]
    break;
 8001e74:	e01f      	b.n	8001eb6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001e76:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001e78:	613b      	str	r3, [r7, #16]
    break;
 8001e7a:	e01c      	b.n	8001eb6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e005      	b.n	8001ea4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001ea4:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	613b      	str	r3, [r7, #16]
    break;
 8001eae:	e002      	b.n	8001eb6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
    break;
 8001eb4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	fb03 f202 	mul.w	r2, r3, r2
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0e5b      	lsrs	r3, r3, #25
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001ef6:	683b      	ldr	r3, [r7, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	40021000 	.word	0x40021000
 8001f08:	00f42400 	.word	0x00f42400
 8001f0c:	007a1200 	.word	0x007a1200
 8001f10:	080034e0 	.word	0x080034e0

08001f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e049      	b.n	8001fba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fbd4 	bl	80006e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f000 fc10 	bl	8002778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e049      	b.n	8002068 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f841 	bl	8002070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f000 fbb9 	bl	8002778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_TIM_PWM_Start+0x24>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e03c      	b.n	8002122 <HAL_TIM_PWM_Start+0x9e>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d109      	bne.n	80020c2 <HAL_TIM_PWM_Start+0x3e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	e02f      	b.n	8002122 <HAL_TIM_PWM_Start+0x9e>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d109      	bne.n	80020dc <HAL_TIM_PWM_Start+0x58>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e022      	b.n	8002122 <HAL_TIM_PWM_Start+0x9e>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d109      	bne.n	80020f6 <HAL_TIM_PWM_Start+0x72>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	e015      	b.n	8002122 <HAL_TIM_PWM_Start+0x9e>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d109      	bne.n	8002110 <HAL_TIM_PWM_Start+0x8c>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e008      	b.n	8002122 <HAL_TIM_PWM_Start+0x9e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e09c      	b.n	8002264 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <HAL_TIM_PWM_Start+0xb6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002138:	e023      	b.n	8002182 <HAL_TIM_PWM_Start+0xfe>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d104      	bne.n	800214a <HAL_TIM_PWM_Start+0xc6>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002148:	e01b      	b.n	8002182 <HAL_TIM_PWM_Start+0xfe>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d104      	bne.n	800215a <HAL_TIM_PWM_Start+0xd6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002158:	e013      	b.n	8002182 <HAL_TIM_PWM_Start+0xfe>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d104      	bne.n	800216a <HAL_TIM_PWM_Start+0xe6>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002168:	e00b      	b.n	8002182 <HAL_TIM_PWM_Start+0xfe>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b10      	cmp	r3, #16
 800216e:	d104      	bne.n	800217a <HAL_TIM_PWM_Start+0xf6>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002178:	e003      	b.n	8002182 <HAL_TIM_PWM_Start+0xfe>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2201      	movs	r2, #1
 8002188:	6839      	ldr	r1, [r7, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fefe 	bl	8002f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a35      	ldr	r2, [pc, #212]	; (800226c <HAL_TIM_PWM_Start+0x1e8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_TIM_PWM_Start+0x13e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a34      	ldr	r2, [pc, #208]	; (8002270 <HAL_TIM_PWM_Start+0x1ec>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00e      	beq.n	80021c2 <HAL_TIM_PWM_Start+0x13e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a32      	ldr	r2, [pc, #200]	; (8002274 <HAL_TIM_PWM_Start+0x1f0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d009      	beq.n	80021c2 <HAL_TIM_PWM_Start+0x13e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a31      	ldr	r2, [pc, #196]	; (8002278 <HAL_TIM_PWM_Start+0x1f4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d004      	beq.n	80021c2 <HAL_TIM_PWM_Start+0x13e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2f      	ldr	r2, [pc, #188]	; (800227c <HAL_TIM_PWM_Start+0x1f8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_PWM_Start+0x142>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_TIM_PWM_Start+0x144>
 80021c6:	2300      	movs	r3, #0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a22      	ldr	r2, [pc, #136]	; (800226c <HAL_TIM_PWM_Start+0x1e8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01d      	beq.n	8002222 <HAL_TIM_PWM_Start+0x19e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ee:	d018      	beq.n	8002222 <HAL_TIM_PWM_Start+0x19e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a22      	ldr	r2, [pc, #136]	; (8002280 <HAL_TIM_PWM_Start+0x1fc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_TIM_PWM_Start+0x19e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a21      	ldr	r2, [pc, #132]	; (8002284 <HAL_TIM_PWM_Start+0x200>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00e      	beq.n	8002222 <HAL_TIM_PWM_Start+0x19e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <HAL_TIM_PWM_Start+0x204>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_TIM_PWM_Start+0x19e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_TIM_PWM_Start+0x1ec>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_TIM_PWM_Start+0x19e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a15      	ldr	r2, [pc, #84]	; (8002274 <HAL_TIM_PWM_Start+0x1f0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d115      	bne.n	800224e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_TIM_PWM_Start+0x208>)
 800222a:	4013      	ands	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b06      	cmp	r3, #6
 8002232:	d015      	beq.n	8002260 <HAL_TIM_PWM_Start+0x1dc>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223a:	d011      	beq.n	8002260 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224c:	e008      	b.n	8002260 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e000      	b.n	8002262 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002260:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40012c00 	.word	0x40012c00
 8002270:	40013400 	.word	0x40013400
 8002274:	40014000 	.word	0x40014000
 8002278:	40014400 	.word	0x40014400
 800227c:	40014800 	.word	0x40014800
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800
 8002288:	40000c00 	.word	0x40000c00
 800228c:	00010007 	.word	0x00010007

08002290 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2200      	movs	r2, #0
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fe72 	bl	8002f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a3e      	ldr	r2, [pc, #248]	; (80023a8 <HAL_TIM_PWM_Stop+0x118>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_TIM_PWM_Stop+0x4a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a3d      	ldr	r2, [pc, #244]	; (80023ac <HAL_TIM_PWM_Stop+0x11c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00e      	beq.n	80022da <HAL_TIM_PWM_Stop+0x4a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a3b      	ldr	r2, [pc, #236]	; (80023b0 <HAL_TIM_PWM_Stop+0x120>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_TIM_PWM_Stop+0x4a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a3a      	ldr	r2, [pc, #232]	; (80023b4 <HAL_TIM_PWM_Stop+0x124>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d004      	beq.n	80022da <HAL_TIM_PWM_Stop+0x4a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a38      	ldr	r2, [pc, #224]	; (80023b8 <HAL_TIM_PWM_Stop+0x128>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_TIM_PWM_Stop+0x4e>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_TIM_PWM_Stop+0x50>
 80022de:	2300      	movs	r3, #0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d017      	beq.n	8002314 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10f      	bne.n	8002314 <HAL_TIM_PWM_Stop+0x84>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	f240 4344 	movw	r3, #1092	; 0x444
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d107      	bne.n	8002314 <HAL_TIM_PWM_Stop+0x84>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002312:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	f241 1311 	movw	r3, #4369	; 0x1111
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_TIM_PWM_Stop+0xb4>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6a1a      	ldr	r2, [r3, #32]
 800232a:	f240 4344 	movw	r3, #1092	; 0x444
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d107      	bne.n	8002344 <HAL_TIM_PWM_Stop+0xb4>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d104      	bne.n	8002354 <HAL_TIM_PWM_Stop+0xc4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002352:	e023      	b.n	800239c <HAL_TIM_PWM_Stop+0x10c>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b04      	cmp	r3, #4
 8002358:	d104      	bne.n	8002364 <HAL_TIM_PWM_Stop+0xd4>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002362:	e01b      	b.n	800239c <HAL_TIM_PWM_Stop+0x10c>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b08      	cmp	r3, #8
 8002368:	d104      	bne.n	8002374 <HAL_TIM_PWM_Stop+0xe4>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002372:	e013      	b.n	800239c <HAL_TIM_PWM_Stop+0x10c>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d104      	bne.n	8002384 <HAL_TIM_PWM_Stop+0xf4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002382:	e00b      	b.n	800239c <HAL_TIM_PWM_Stop+0x10c>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b10      	cmp	r3, #16
 8002388:	d104      	bne.n	8002394 <HAL_TIM_PWM_Stop+0x104>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002392:	e003      	b.n	800239c <HAL_TIM_PWM_Stop+0x10c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40013400 	.word	0x40013400
 80023b0:	40014000 	.word	0x40014000
 80023b4:	40014400 	.word	0x40014400
 80023b8:	40014800 	.word	0x40014800

080023bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e0ff      	b.n	80025da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b14      	cmp	r3, #20
 80023e6:	f200 80f0 	bhi.w	80025ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	08002445 	.word	0x08002445
 80023f4:	080025cb 	.word	0x080025cb
 80023f8:	080025cb 	.word	0x080025cb
 80023fc:	080025cb 	.word	0x080025cb
 8002400:	08002485 	.word	0x08002485
 8002404:	080025cb 	.word	0x080025cb
 8002408:	080025cb 	.word	0x080025cb
 800240c:	080025cb 	.word	0x080025cb
 8002410:	080024c7 	.word	0x080024c7
 8002414:	080025cb 	.word	0x080025cb
 8002418:	080025cb 	.word	0x080025cb
 800241c:	080025cb 	.word	0x080025cb
 8002420:	08002507 	.word	0x08002507
 8002424:	080025cb 	.word	0x080025cb
 8002428:	080025cb 	.word	0x080025cb
 800242c:	080025cb 	.word	0x080025cb
 8002430:	08002549 	.word	0x08002549
 8002434:	080025cb 	.word	0x080025cb
 8002438:	080025cb 	.word	0x080025cb
 800243c:	080025cb 	.word	0x080025cb
 8002440:	08002589 	.word	0x08002589
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fa2e 	bl	80028ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0208 	orr.w	r2, r2, #8
 800245e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0204 	bic.w	r2, r2, #4
 800246e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6999      	ldr	r1, [r3, #24]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	619a      	str	r2, [r3, #24]
      break;
 8002482:	e0a5      	b.n	80025d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fa9e 	bl	80029cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800249e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6999      	ldr	r1, [r3, #24]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	021a      	lsls	r2, r3, #8
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	619a      	str	r2, [r3, #24]
      break;
 80024c4:	e084      	b.n	80025d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fb07 	bl	8002ae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0208 	orr.w	r2, r2, #8
 80024e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0204 	bic.w	r2, r2, #4
 80024f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69d9      	ldr	r1, [r3, #28]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	61da      	str	r2, [r3, #28]
      break;
 8002504:	e064      	b.n	80025d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fb6f 	bl	8002bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69d9      	ldr	r1, [r3, #28]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	021a      	lsls	r2, r3, #8
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	61da      	str	r2, [r3, #28]
      break;
 8002546:	e043      	b.n	80025d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fbb8 	bl	8002cc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0208 	orr.w	r2, r2, #8
 8002562:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0204 	bic.w	r2, r2, #4
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002586:	e023      	b.n	80025d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fbfc 	bl	8002d8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	021a      	lsls	r2, r3, #8
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025c8:	e002      	b.n	80025d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
      break;
 80025ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop

080025e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_TIM_ConfigClockSource+0x1c>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0b6      	b.n	800276e <HAL_TIM_ConfigClockSource+0x18a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800262a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263c:	d03e      	beq.n	80026bc <HAL_TIM_ConfigClockSource+0xd8>
 800263e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002642:	f200 8087 	bhi.w	8002754 <HAL_TIM_ConfigClockSource+0x170>
 8002646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264a:	f000 8086 	beq.w	800275a <HAL_TIM_ConfigClockSource+0x176>
 800264e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002652:	d87f      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x170>
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d01a      	beq.n	800268e <HAL_TIM_ConfigClockSource+0xaa>
 8002658:	2b70      	cmp	r3, #112	; 0x70
 800265a:	d87b      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x170>
 800265c:	2b60      	cmp	r3, #96	; 0x60
 800265e:	d050      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x11e>
 8002660:	2b60      	cmp	r3, #96	; 0x60
 8002662:	d877      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x170>
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d03c      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0xfe>
 8002668:	2b50      	cmp	r3, #80	; 0x50
 800266a:	d873      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x170>
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d058      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x13e>
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d86f      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x170>
 8002674:	2b30      	cmp	r3, #48	; 0x30
 8002676:	d064      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x15e>
 8002678:	2b30      	cmp	r3, #48	; 0x30
 800267a:	d86b      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x170>
 800267c:	2b20      	cmp	r3, #32
 800267e:	d060      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x15e>
 8002680:	2b20      	cmp	r3, #32
 8002682:	d867      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x170>
 8002684:	2b00      	cmp	r3, #0
 8002686:	d05c      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x15e>
 8002688:	2b10      	cmp	r3, #16
 800268a:	d05a      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x15e>
 800268c:	e062      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800269e:	f000 fc55 	bl	8002f4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	609a      	str	r2, [r3, #8]
      break;
 80026ba:	e04f      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026cc:	f000 fc3e 	bl	8002f4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026de:	609a      	str	r2, [r3, #8]
      break;
 80026e0:	e03c      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 fbb2 	bl	8002e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2150      	movs	r1, #80	; 0x50
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fc0b 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 8002700:	e02c      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800270e:	461a      	mov	r2, r3
 8002710:	f000 fbd1 	bl	8002eb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2160      	movs	r1, #96	; 0x60
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fbfb 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 8002720:	e01c      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272e:	461a      	mov	r2, r3
 8002730:	f000 fb92 	bl	8002e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2140      	movs	r1, #64	; 0x40
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fbeb 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 8002740:	e00c      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4619      	mov	r1, r3
 800274c:	4610      	mov	r0, r2
 800274e:	f000 fbe2 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 8002752:	e003      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e000      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800275a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a40      	ldr	r2, [pc, #256]	; (800288c <TIM_Base_SetConfig+0x114>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d013      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002796:	d00f      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3d      	ldr	r2, [pc, #244]	; (8002890 <TIM_Base_SetConfig+0x118>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a3c      	ldr	r2, [pc, #240]	; (8002894 <TIM_Base_SetConfig+0x11c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3b      	ldr	r2, [pc, #236]	; (8002898 <TIM_Base_SetConfig+0x120>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a3a      	ldr	r2, [pc, #232]	; (800289c <TIM_Base_SetConfig+0x124>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d108      	bne.n	80027ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2f      	ldr	r2, [pc, #188]	; (800288c <TIM_Base_SetConfig+0x114>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01f      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d01b      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <TIM_Base_SetConfig+0x118>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d017      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <TIM_Base_SetConfig+0x11c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <TIM_Base_SetConfig+0x120>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00f      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a29      	ldr	r2, [pc, #164]	; (800289c <TIM_Base_SetConfig+0x124>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00b      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a28      	ldr	r2, [pc, #160]	; (80028a0 <TIM_Base_SetConfig+0x128>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <TIM_Base_SetConfig+0x12c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <TIM_Base_SetConfig+0x9a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a26      	ldr	r2, [pc, #152]	; (80028a8 <TIM_Base_SetConfig+0x130>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d108      	bne.n	8002824 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a10      	ldr	r2, [pc, #64]	; (800288c <TIM_Base_SetConfig+0x114>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00f      	beq.n	8002870 <TIM_Base_SetConfig+0xf8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a12      	ldr	r2, [pc, #72]	; (800289c <TIM_Base_SetConfig+0x124>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00b      	beq.n	8002870 <TIM_Base_SetConfig+0xf8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <TIM_Base_SetConfig+0x128>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d007      	beq.n	8002870 <TIM_Base_SetConfig+0xf8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <TIM_Base_SetConfig+0x12c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d003      	beq.n	8002870 <TIM_Base_SetConfig+0xf8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <TIM_Base_SetConfig+0x130>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d103      	bne.n	8002878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	615a      	str	r2, [r3, #20]
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40000c00 	.word	0x40000c00
 800289c:	40013400 	.word	0x40013400
 80028a0:	40014000 	.word	0x40014000
 80028a4:	40014400 	.word	0x40014400
 80028a8:	40014800 	.word	0x40014800

080028ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f023 0201 	bic.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f023 0302 	bic.w	r3, r3, #2
 80028f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a2c      	ldr	r2, [pc, #176]	; (80029b8 <TIM_OC1_SetConfig+0x10c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00f      	beq.n	800292c <TIM_OC1_SetConfig+0x80>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <TIM_OC1_SetConfig+0x110>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00b      	beq.n	800292c <TIM_OC1_SetConfig+0x80>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a2a      	ldr	r2, [pc, #168]	; (80029c0 <TIM_OC1_SetConfig+0x114>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d007      	beq.n	800292c <TIM_OC1_SetConfig+0x80>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <TIM_OC1_SetConfig+0x118>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d003      	beq.n	800292c <TIM_OC1_SetConfig+0x80>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <TIM_OC1_SetConfig+0x11c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d10c      	bne.n	8002946 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f023 0308 	bic.w	r3, r3, #8
 8002932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f023 0304 	bic.w	r3, r3, #4
 8002944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <TIM_OC1_SetConfig+0x10c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00f      	beq.n	800296e <TIM_OC1_SetConfig+0xc2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <TIM_OC1_SetConfig+0x110>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_OC1_SetConfig+0xc2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <TIM_OC1_SetConfig+0x114>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_OC1_SetConfig+0xc2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <TIM_OC1_SetConfig+0x118>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_OC1_SetConfig+0xc2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <TIM_OC1_SetConfig+0x11c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d111      	bne.n	8002992 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800297c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	621a      	str	r2, [r3, #32]
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40013400 	.word	0x40013400
 80029c0:	40014000 	.word	0x40014000
 80029c4:	40014400 	.word	0x40014400
 80029c8:	40014800 	.word	0x40014800

080029cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f023 0210 	bic.w	r2, r3, #16
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0320 	bic.w	r3, r3, #32
 8002a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a28      	ldr	r2, [pc, #160]	; (8002acc <TIM_OC2_SetConfig+0x100>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_OC2_SetConfig+0x6c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a27      	ldr	r2, [pc, #156]	; (8002ad0 <TIM_OC2_SetConfig+0x104>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d10d      	bne.n	8002a54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <TIM_OC2_SetConfig+0x100>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00f      	beq.n	8002a7c <TIM_OC2_SetConfig+0xb0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <TIM_OC2_SetConfig+0x104>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00b      	beq.n	8002a7c <TIM_OC2_SetConfig+0xb0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <TIM_OC2_SetConfig+0x108>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d007      	beq.n	8002a7c <TIM_OC2_SetConfig+0xb0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ad8 <TIM_OC2_SetConfig+0x10c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d003      	beq.n	8002a7c <TIM_OC2_SetConfig+0xb0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a19      	ldr	r2, [pc, #100]	; (8002adc <TIM_OC2_SetConfig+0x110>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d113      	bne.n	8002aa4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	621a      	str	r2, [r3, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40013400 	.word	0x40013400
 8002ad4:	40014000 	.word	0x40014000
 8002ad8:	40014400 	.word	0x40014400
 8002adc:	40014800 	.word	0x40014800

08002ae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a27      	ldr	r2, [pc, #156]	; (8002bdc <TIM_OC3_SetConfig+0xfc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d003      	beq.n	8002b4a <TIM_OC3_SetConfig+0x6a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a26      	ldr	r2, [pc, #152]	; (8002be0 <TIM_OC3_SetConfig+0x100>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10d      	bne.n	8002b66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <TIM_OC3_SetConfig+0xfc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00f      	beq.n	8002b8e <TIM_OC3_SetConfig+0xae>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <TIM_OC3_SetConfig+0x100>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00b      	beq.n	8002b8e <TIM_OC3_SetConfig+0xae>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <TIM_OC3_SetConfig+0x104>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <TIM_OC3_SetConfig+0xae>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <TIM_OC3_SetConfig+0x108>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <TIM_OC3_SetConfig+0xae>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <TIM_OC3_SetConfig+0x10c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d113      	bne.n	8002bb6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	621a      	str	r2, [r3, #32]
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40013400 	.word	0x40013400
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40014400 	.word	0x40014400
 8002bec:	40014800 	.word	0x40014800

08002bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	031b      	lsls	r3, r3, #12
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <TIM_OC4_SetConfig+0xc0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00f      	beq.n	8002c74 <TIM_OC4_SetConfig+0x84>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <TIM_OC4_SetConfig+0xc4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <TIM_OC4_SetConfig+0x84>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <TIM_OC4_SetConfig+0xc8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d007      	beq.n	8002c74 <TIM_OC4_SetConfig+0x84>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <TIM_OC4_SetConfig+0xcc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_OC4_SetConfig+0x84>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <TIM_OC4_SetConfig+0xd0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d109      	bne.n	8002c88 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	019b      	lsls	r3, r3, #6
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	621a      	str	r2, [r3, #32]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40013400 	.word	0x40013400
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800

08002cc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <TIM_OC5_SetConfig+0xb4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00f      	beq.n	8002d3e <TIM_OC5_SetConfig+0x7a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <TIM_OC5_SetConfig+0xb8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <TIM_OC5_SetConfig+0x7a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <TIM_OC5_SetConfig+0xbc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_OC5_SetConfig+0x7a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <TIM_OC5_SetConfig+0xc0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_OC5_SetConfig+0x7a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <TIM_OC5_SetConfig+0xc4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d109      	bne.n	8002d52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	621a      	str	r2, [r3, #32]
}
 8002d6c:	bf00      	nop
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40012c00 	.word	0x40012c00
 8002d7c:	40013400 	.word	0x40013400
 8002d80:	40014000 	.word	0x40014000
 8002d84:	40014400 	.word	0x40014400
 8002d88:	40014800 	.word	0x40014800

08002d8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	051b      	lsls	r3, r3, #20
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <TIM_OC6_SetConfig+0xb8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00f      	beq.n	8002e08 <TIM_OC6_SetConfig+0x7c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <TIM_OC6_SetConfig+0xbc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <TIM_OC6_SetConfig+0x7c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a16      	ldr	r2, [pc, #88]	; (8002e4c <TIM_OC6_SetConfig+0xc0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_OC6_SetConfig+0x7c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <TIM_OC6_SetConfig+0xc4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_OC6_SetConfig+0x7c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <TIM_OC6_SetConfig+0xc8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d109      	bne.n	8002e1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	029b      	lsls	r3, r3, #10
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40013400 	.word	0x40013400
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800

08002e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f023 0201 	bic.w	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 030a 	bic.w	r3, r3, #10
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f023 0210 	bic.w	r2, r3, #16
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	031b      	lsls	r3, r3, #12
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ef2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f043 0307 	orr.w	r3, r3, #7
 8002f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	021a      	lsls	r2, r3, #8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	609a      	str	r2, [r3, #8]
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	401a      	ands	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1a      	ldr	r2, [r3, #32]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <HAL_TIMEx_PWMN_Start+0x24>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e022      	b.n	8003042 <HAL_TIMEx_PWMN_Start+0x6a>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d109      	bne.n	8003016 <HAL_TIMEx_PWMN_Start+0x3e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b01      	cmp	r3, #1
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	e015      	b.n	8003042 <HAL_TIMEx_PWMN_Start+0x6a>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d109      	bne.n	8003030 <HAL_TIMEx_PWMN_Start+0x58>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e008      	b.n	8003042 <HAL_TIMEx_PWMN_Start+0x6a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e06e      	b.n	8003128 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <HAL_TIMEx_PWMN_Start+0x82>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003058:	e013      	b.n	8003082 <HAL_TIMEx_PWMN_Start+0xaa>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b04      	cmp	r3, #4
 800305e:	d104      	bne.n	800306a <HAL_TIMEx_PWMN_Start+0x92>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003068:	e00b      	b.n	8003082 <HAL_TIMEx_PWMN_Start+0xaa>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d104      	bne.n	800307a <HAL_TIMEx_PWMN_Start+0xa2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003078:	e003      	b.n	8003082 <HAL_TIMEx_PWMN_Start+0xaa>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2204      	movs	r2, #4
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f9c2 	bl	8003414 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800309e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a22      	ldr	r2, [pc, #136]	; (8003130 <HAL_TIMEx_PWMN_Start+0x158>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01d      	beq.n	80030e6 <HAL_TIMEx_PWMN_Start+0x10e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b2:	d018      	beq.n	80030e6 <HAL_TIMEx_PWMN_Start+0x10e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <HAL_TIMEx_PWMN_Start+0x15c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_TIMEx_PWMN_Start+0x10e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <HAL_TIMEx_PWMN_Start+0x160>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_TIMEx_PWMN_Start+0x10e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1b      	ldr	r2, [pc, #108]	; (800313c <HAL_TIMEx_PWMN_Start+0x164>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_TIMEx_PWMN_Start+0x10e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_TIMEx_PWMN_Start+0x168>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_TIMEx_PWMN_Start+0x10e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_TIMEx_PWMN_Start+0x16c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d115      	bne.n	8003112 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_TIMEx_PWMN_Start+0x170>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d015      	beq.n	8003124 <HAL_TIMEx_PWMN_Start+0x14c>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fe:	d011      	beq.n	8003124 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003110:	e008      	b.n	8003124 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e000      	b.n	8003126 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003124:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40000400 	.word	0x40000400
 8003138:	40000800 	.word	0x40000800
 800313c:	40000c00 	.word	0x40000c00
 8003140:	40013400 	.word	0x40013400
 8003144:	40014000 	.word	0x40014000
 8003148:	00010007 	.word	0x00010007

0800314c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2200      	movs	r2, #0
 800315c:	6839      	ldr	r1, [r7, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f958 	bl	8003414 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a1a      	ldr	r2, [r3, #32]
 800316a:	f241 1311 	movw	r3, #4369	; 0x1111
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10f      	bne.n	8003194 <HAL_TIMEx_PWMN_Stop+0x48>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a1a      	ldr	r2, [r3, #32]
 800317a:	f240 4344 	movw	r3, #1092	; 0x444
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d107      	bne.n	8003194 <HAL_TIMEx_PWMN_Stop+0x48>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003192:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	f241 1311 	movw	r3, #4369	; 0x1111
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10f      	bne.n	80031c4 <HAL_TIMEx_PWMN_Stop+0x78>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6a1a      	ldr	r2, [r3, #32]
 80031aa:	f240 4344 	movw	r3, #1092	; 0x444
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_TIMEx_PWMN_Stop+0x78>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d104      	bne.n	80031d4 <HAL_TIMEx_PWMN_Stop+0x88>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d2:	e013      	b.n	80031fc <HAL_TIMEx_PWMN_Stop+0xb0>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d104      	bne.n	80031e4 <HAL_TIMEx_PWMN_Stop+0x98>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031e2:	e00b      	b.n	80031fc <HAL_TIMEx_PWMN_Stop+0xb0>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d104      	bne.n	80031f4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031f2:	e003      	b.n	80031fc <HAL_TIMEx_PWMN_Stop+0xb0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800321c:	2302      	movs	r3, #2
 800321e:	e068      	b.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2d      	ldr	r2, [pc, #180]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d108      	bne.n	8003266 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800325a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01d      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d018      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a13      	ldr	r2, [pc, #76]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10c      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40013400 	.word	0x40013400
 8003308:	40000400 	.word	0x40000400
 800330c:	40000800 	.word	0x40000800
 8003310:	40000c00 	.word	0x40000c00
 8003314:	40014000 	.word	0x40014000

08003318 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003330:	2302      	movs	r3, #2
 8003332:	e065      	b.n	8003400 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a16      	ldr	r2, [pc, #88]	; (800340c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a14      	ldr	r2, [pc, #80]	; (8003410 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d115      	bne.n	80033ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	051b      	lsls	r3, r3, #20
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40013400 	.word	0x40013400

08003414 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	2204      	movs	r2, #4
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1a      	ldr	r2, [r3, #32]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a1a      	ldr	r2, [r3, #32]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	431a      	orrs	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <memset>:
 800345e:	4402      	add	r2, r0
 8003460:	4603      	mov	r3, r0
 8003462:	4293      	cmp	r3, r2
 8003464:	d100      	bne.n	8003468 <memset+0xa>
 8003466:	4770      	bx	lr
 8003468:	f803 1b01 	strb.w	r1, [r3], #1
 800346c:	e7f9      	b.n	8003462 <memset+0x4>
	...

08003470 <__libc_init_array>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	4d0d      	ldr	r5, [pc, #52]	; (80034a8 <__libc_init_array+0x38>)
 8003474:	4c0d      	ldr	r4, [pc, #52]	; (80034ac <__libc_init_array+0x3c>)
 8003476:	1b64      	subs	r4, r4, r5
 8003478:	10a4      	asrs	r4, r4, #2
 800347a:	2600      	movs	r6, #0
 800347c:	42a6      	cmp	r6, r4
 800347e:	d109      	bne.n	8003494 <__libc_init_array+0x24>
 8003480:	4d0b      	ldr	r5, [pc, #44]	; (80034b0 <__libc_init_array+0x40>)
 8003482:	4c0c      	ldr	r4, [pc, #48]	; (80034b4 <__libc_init_array+0x44>)
 8003484:	f000 f818 	bl	80034b8 <_init>
 8003488:	1b64      	subs	r4, r4, r5
 800348a:	10a4      	asrs	r4, r4, #2
 800348c:	2600      	movs	r6, #0
 800348e:	42a6      	cmp	r6, r4
 8003490:	d105      	bne.n	800349e <__libc_init_array+0x2e>
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	f855 3b04 	ldr.w	r3, [r5], #4
 8003498:	4798      	blx	r3
 800349a:	3601      	adds	r6, #1
 800349c:	e7ee      	b.n	800347c <__libc_init_array+0xc>
 800349e:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a2:	4798      	blx	r3
 80034a4:	3601      	adds	r6, #1
 80034a6:	e7f2      	b.n	800348e <__libc_init_array+0x1e>
 80034a8:	08003510 	.word	0x08003510
 80034ac:	08003510 	.word	0x08003510
 80034b0:	08003510 	.word	0x08003510
 80034b4:	08003514 	.word	0x08003514

080034b8 <_init>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	bf00      	nop
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr

080034c4 <_fini>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	bf00      	nop
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr
