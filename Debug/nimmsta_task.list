
nimmsta_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003310  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800350c  0800350c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800350c  0800350c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800350c  0800350c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  08003524  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08003524  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aeca  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019a1  00000000  00000000  0002af4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  0002c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092c  00000000  00000000  0002d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ee40  00000000  00000000  0002de0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c582  00000000  00000000  0005cc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d876  00000000  00000000  000691ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003120  00000000  00000000  00186a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00189b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080034b4 	.word	0x080034b4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	080034b4 	.word	0x080034b4

080001fc <main>:
  * Initialization of System clock, GPIOs, Timer. A test tone is played after the initialization.
  *
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

  // Initialize system peripherals
  SYSTEM_INIT();
 8000200:	f000 f854 	bl	80002ac <SYSTEM_INIT>
  // Issue test tone
  TIMER_TEST_TONE();
 8000204:	f000 f9ee 	bl	80005e4 <TIMER_TEST_TONE>
   * In the while() a PUSH_BUTTON_INTERRUPT flag is polled.
   * */
  while (1)
  {
		//Enter Low-power mode - STOP mode.
		STM_ENTER_LPM();
 8000208:	f000 f85c 	bl	80002c4 <STM_ENTER_LPM>


	    if(PUSH_BUTTON_INTERRUPT)
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <main+0x9c>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <main+0xc>
	    {
		    //Load timer auto-reload register with note frequency
		    TIM15->ARR = TIM15_PWM_FREQ_C6;				//C6 Note frequency
 8000214:	4b21      	ldr	r3, [pc, #132]	; (800029c <main+0xa0>)
 8000216:	f643 32b1 	movw	r2, #15281	; 0x3bb1
 800021a:	62da      	str	r2, [r3, #44]	; 0x2c

			// Enable Buzzer-logic circuit
			HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2102      	movs	r1, #2
 8000220:	481f      	ldr	r0, [pc, #124]	; (80002a0 <main+0xa4>)
 8000222:	f000 fe63 	bl	8000eec <HAL_GPIO_WritePin>
			// Enable H-bridge functioning
			HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022c:	481d      	ldr	r0, [pc, #116]	; (80002a4 <main+0xa8>)
 800022e:	f000 fe5d 	bl	8000eec <HAL_GPIO_WritePin>

			// start Timer PWM
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000232:	2100      	movs	r1, #0
 8000234:	481c      	ldr	r0, [pc, #112]	; (80002a8 <main+0xac>)
 8000236:	f001 ff23 	bl	8002080 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 800023a:	2100      	movs	r1, #0
 800023c:	481a      	ldr	r0, [pc, #104]	; (80002a8 <main+0xac>)
 800023e:	f002 fec9 	bl	8002fd4 <HAL_TIMEx_PWMN_Start>
			HAL_Delay(500);								//wait 500ms
 8000242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000246:	f000 fb89 	bl	800095c <HAL_Delay>

			TIM15->ARR = TIM15_PWM_FREQ_D6;				//D6 Note frequency
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <main+0xa0>)
 800024c:	f243 5231 	movw	r2, #13617	; 0x3531
 8000250:	62da      	str	r2, [r3, #44]	; 0x2c

			HAL_Delay(500);								//wait 500ms
 8000252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000256:	f000 fb81 	bl	800095c <HAL_Delay>

			TIM15->ARR = TIM15_PWM_FREQ_E6;				//E6 Note frequency
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <main+0xa0>)
 800025c:	f642 7262 	movw	r2, #12130	; 0x2f62
 8000260:	62da      	str	r2, [r3, #44]	; 0x2c

			HAL_Delay(500);								//wait 500ms
 8000262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000266:	f000 fb79 	bl	800095c <HAL_Delay>

			// Disable H-bridge
			HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <main+0xa8>)
 8000272:	f000 fe3b 	bl	8000eec <HAL_GPIO_WritePin>

			//Stop Timer PWM
			HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8000276:	2100      	movs	r1, #0
 8000278:	480b      	ldr	r0, [pc, #44]	; (80002a8 <main+0xac>)
 800027a:	f002 f807 	bl	800228c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 800027e:	2100      	movs	r1, #0
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <main+0xac>)
 8000282:	f002 ff61 	bl	8003148 <HAL_TIMEx_PWMN_Stop>

			// Disable Buzzer-logic circuit
			HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 8000286:	2201      	movs	r2, #1
 8000288:	2102      	movs	r1, #2
 800028a:	4805      	ldr	r0, [pc, #20]	; (80002a0 <main+0xa4>)
 800028c:	f000 fe2e 	bl	8000eec <HAL_GPIO_WritePin>

			PUSH_BUTTON_INTERRUPT = FALSE;		//RESET push button flag
 8000290:	4b01      	ldr	r3, [pc, #4]	; (8000298 <main+0x9c>)
 8000292:	2201      	movs	r2, #1
 8000294:	701a      	strb	r2, [r3, #0]
		STM_ENTER_LPM();
 8000296:	e7b7      	b.n	8000208 <main+0xc>
 8000298:	20000000 	.word	0x20000000
 800029c:	40014000 	.word	0x40014000
 80002a0:	48001000 	.word	0x48001000
 80002a4:	48000800 	.word	0x48000800
 80002a8:	2000002c 	.word	0x2000002c

080002ac <SYSTEM_INIT>:

/*
 *
 * */
void SYSTEM_INIT()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

	HAL_Init();
 80002b0:	f000 fadf 	bl	8000872 <HAL_Init>

	//Initialize clock
	SystemClock_Config();
 80002b4:	f000 f810 	bl	80002d8 <SystemClock_Config>

	// Initialize GPIOs
	MX_GPIO_Init();
 80002b8:	f000 f916 	bl	80004e8 <MX_GPIO_Init>

	//Initialize Timer
	MX_TIM15_Init();
 80002bc:	f000 f872 	bl	80003a4 <MX_TIM15_Init>

}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <STM_ENTER_LPM>:
 * 			- GPIO enabled for Interrupt
 * 			- WAKE-UP by External interrupt
 *
 * */
void STM_ENTER_LPM()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

	//Enter STOP_MODE 1 - LOW POWR REGULATOR for Lower power consumption. Trade-off is Delayed Wake-up time
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80002c8:	2101      	movs	r1, #1
 80002ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002ce:	f000 fe3d 	bl	8000f4c <HAL_PWR_EnterSTOPMode>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @return value - None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b098      	sub	sp, #96	; 0x60
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2244      	movs	r2, #68	; 0x44
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 f8b7 	bl	800345a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000300:	f000 fe5c 	bl	8000fbc <HAL_PWREx_ControlVoltageScaling>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800030a:	f000 f9bd 	bl	8000688 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030e:	2302      	movs	r3, #2
 8000310:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000318:	2340      	movs	r3, #64	; 0x40
 800031a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031c:	2300      	movs	r3, #0
 800031e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 031c 	add.w	r3, r7, #28
 8000324:	4618      	mov	r0, r3
 8000326:	f000 ff53 	bl	80011d0 <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000330:	f000 f9aa 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000338:	2301      	movs	r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000348:	f107 0308 	add.w	r3, r7, #8
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f001 fb58 	bl	8001a04 <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800035a:	f000 f995 	bl	8000688 <Error_Handler>
  }

  /*
   * Disable Low-speed External clock to use PC14 as a standard GPIO pin
   */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <SystemClock_Config+0xc8>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <SystemClock_Config+0xc8>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <SystemClock_Config+0xc8>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);			//Low-speed External Oscillator Switched OFF
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <SystemClock_Config+0xc8>)
 8000378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800037c:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <SystemClock_Config+0xc8>)
 800037e:	f023 0301 	bic.w	r3, r3, #1
 8000382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <SystemClock_Config+0xc8>)
 8000388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800038c:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <SystemClock_Config+0xc8>)
 800038e:	f023 0304 	bic.w	r3, r3, #4
 8000392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

}
 8000396:	bf00      	nop
 8000398:	3760      	adds	r7, #96	; 0x60
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000

080003a4 <MX_TIM15_Init>:
	*
	* @param None
	* @retval None
  */
static void MX_TIM15_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b09a      	sub	sp, #104	; 0x68
 80003a8:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
 80003d4:	615a      	str	r2, [r3, #20]
 80003d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	222c      	movs	r2, #44	; 0x2c
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f003 f83b 	bl	800345a <memset>

  htim15.Instance = TIM15;
 80003e4:	4b3e      	ldr	r3, [pc, #248]	; (80004e0 <MX_TIM15_Init+0x13c>)
 80003e6:	4a3f      	ldr	r2, [pc, #252]	; (80004e4 <MX_TIM15_Init+0x140>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80003ea:	4b3d      	ldr	r3, [pc, #244]	; (80004e0 <MX_TIM15_Init+0x13c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b3b      	ldr	r3, [pc, #236]	; (80004e0 <MX_TIM15_Init+0x13c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 80003f6:	4b3a      	ldr	r3, [pc, #232]	; (80004e0 <MX_TIM15_Init+0x13c>)
 80003f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80003fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b38      	ldr	r3, [pc, #224]	; (80004e0 <MX_TIM15_Init+0x13c>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 1;
 8000404:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <MX_TIM15_Init+0x13c>)
 8000406:	2201      	movs	r2, #1
 8000408:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800040a:	4b35      	ldr	r3, [pc, #212]	; (80004e0 <MX_TIM15_Init+0x13c>)
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000410:	4833      	ldr	r0, [pc, #204]	; (80004e0 <MX_TIM15_Init+0x13c>)
 8000412:	f001 fd7d 	bl	8001f10 <HAL_TIM_Base_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800041c:	f000 f934 	bl	8000688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000424:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000426:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800042a:	4619      	mov	r1, r3
 800042c:	482c      	ldr	r0, [pc, #176]	; (80004e0 <MX_TIM15_Init+0x13c>)
 800042e:	f002 f8d7 	bl	80025e0 <HAL_TIM_ConfigClockSource>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000438:	f000 f926 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800043c:	4828      	ldr	r0, [pc, #160]	; (80004e0 <MX_TIM15_Init+0x13c>)
 800043e:	f001 fdbe 	bl	8001fbe <HAL_TIM_PWM_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000448:	f000 f91e 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044c:	2300      	movs	r3, #0
 800044e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000450:	2300      	movs	r3, #0
 8000452:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000454:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000458:	4619      	mov	r1, r3
 800045a:	4821      	ldr	r0, [pc, #132]	; (80004e0 <MX_TIM15_Init+0x13c>)
 800045c:	f002 fed2 	bl	8003204 <HAL_TIMEx_MasterConfigSynchronization>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000466:	f000 f90f 	bl	8000688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800046a:	2360      	movs	r3, #96	; 0x60
 800046c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000;								//Duty cycle = 50%
 800046e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000472:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000474:	2300      	movs	r3, #0
 8000476:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000478:	2300      	movs	r3, #0
 800047a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800047c:	2300      	movs	r3, #0
 800047e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000480:	2300      	movs	r3, #0
 8000482:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800048c:	2200      	movs	r2, #0
 800048e:	4619      	mov	r1, r3
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <MX_TIM15_Init+0x13c>)
 8000492:	f001 ff91 	bl	80023b8 <HAL_TIM_PWM_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800049c:	f000 f8f4 	bl	8000688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;								// Dead time insertion for complementary PWM
 80004ac:	230a      	movs	r3, #10
 80004ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	4619      	mov	r1, r3
 80004c2:	4807      	ldr	r0, [pc, #28]	; (80004e0 <MX_TIM15_Init+0x13c>)
 80004c4:	f002 ff26 	bl	8003314 <HAL_TIMEx_ConfigBreakDeadTime>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80004ce:	f000 f8db 	bl	8000688 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim15);
 80004d2:	4803      	ldr	r0, [pc, #12]	; (80004e0 <MX_TIM15_Init+0x13c>)
 80004d4:	f000 f926 	bl	8000724 <HAL_TIM_MspPostInit>

}
 80004d8:	bf00      	nop
 80004da:	3768      	adds	r7, #104	; 0x68
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000002c 	.word	0x2000002c
 80004e4:	40014000 	.word	0x40014000

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004fe:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <MX_GPIO_Init+0xf0>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a35      	ldr	r2, [pc, #212]	; (80005d8 <MX_GPIO_Init+0xf0>)
 8000504:	f043 0310 	orr.w	r3, r3, #16
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <MX_GPIO_Init+0xf0>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0310 	and.w	r3, r3, #16
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <MX_GPIO_Init+0xf0>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a2f      	ldr	r2, [pc, #188]	; (80005d8 <MX_GPIO_Init+0xf0>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <MX_GPIO_Init+0xf0>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <MX_GPIO_Init+0xf0>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a29      	ldr	r2, [pc, #164]	; (80005d8 <MX_GPIO_Init+0xf0>)
 8000534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <MX_GPIO_Init+0xf0>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000546:	f000 fddd 	bl	8001104 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2102      	movs	r1, #2
 800054e:	4823      	ldr	r0, [pc, #140]	; (80005dc <MX_GPIO_Init+0xf4>)
 8000550:	f000 fccc 	bl	8000eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055a:	4821      	ldr	r0, [pc, #132]	; (80005e0 <MX_GPIO_Init+0xf8>)
 800055c:	f000 fcc6 	bl	8000eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CPU_BUZZER_DISABLE_OUT_Pin */
  GPIO_InitStruct.Pin = CPU_BUZZER_DISABLE_OUT_Pin;
 8000560:	2302      	movs	r3, #2
 8000562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CPU_BUZZER_DISABLE_OUT_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	4619      	mov	r1, r3
 8000576:	4819      	ldr	r0, [pc, #100]	; (80005dc <MX_GPIO_Init+0xf4>)
 8000578:	f000 fb26 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_BUZZER_SLEEP_OUT_Pin */

  // Configure GPIO pin output level
  HAL_GPIO_WritePin(GPIOC, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2102      	movs	r1, #2
 8000580:	4817      	ldr	r0, [pc, #92]	; (80005e0 <MX_GPIO_Init+0xf8>)
 8000582:	f000 fcb3 	bl	8000eec <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = CPU_BUZZER_SLEEP_OUT_Pin;
 8000586:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CPU_BUZZER_SLEEP_OUT_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	4619      	mov	r1, r3
 800059e:	4810      	ldr	r0, [pc, #64]	; (80005e0 <MX_GPIO_Init+0xf8>)
 80005a0:	f000 fb12 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_Buttom_Pin */
  GPIO_InitStruct.Pin = Push_Buttom_Pin;
 80005a4:	2320      	movs	r3, #32
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Push_Buttom_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	4809      	ldr	r0, [pc, #36]	; (80005e0 <MX_GPIO_Init+0xf8>)
 80005ba:	f000 fb05 	bl	8000bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2017      	movs	r0, #23
 80005c4:	f000 fac9 	bl	8000b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005c8:	2017      	movs	r0, #23
 80005ca:	f000 fae2 	bl	8000b92 <HAL_NVIC_EnableIRQ>

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48001000 	.word	0x48001000
 80005e0:	48000800 	.word	0x48000800

080005e4 <TIMER_TEST_TONE>:
 * @brief Function to generate test tone for 880 Hz on startup
  * @param None
  * @retval None
  */
void TIMER_TEST_TONE()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	//Load timer auto-reload register with test-tone frequency
	TIM15->ARR = TIM15_PWM_FREQ_880;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <TIMER_TEST_TONE+0x64>)
 80005ea:	f244 7205 	movw	r2, #18181	; 0x4705
 80005ee:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Buzzer-logic circuit
	HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2102      	movs	r1, #2
 80005f4:	4815      	ldr	r0, [pc, #84]	; (800064c <TIMER_TEST_TONE+0x68>)
 80005f6:	f000 fc79 	bl	8000eec <HAL_GPIO_WritePin>
	// Enable H-bridge functioning
	HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000600:	4813      	ldr	r0, [pc, #76]	; (8000650 <TIMER_TEST_TONE+0x6c>)
 8000602:	f000 fc73 	bl	8000eec <HAL_GPIO_WritePin>


	// start Timer PWM
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000606:	2100      	movs	r1, #0
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <TIMER_TEST_TONE+0x70>)
 800060a:	f001 fd39 	bl	8002080 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 800060e:	2100      	movs	r1, #0
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <TIMER_TEST_TONE+0x70>)
 8000612:	f002 fcdf 	bl	8002fd4 <HAL_TIMEx_PWMN_Start>

	HAL_Delay(1000); 								//wait 1sec
 8000616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061a:	f000 f99f 	bl	800095c <HAL_Delay>

	// Disable H-bridge
	HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <TIMER_TEST_TONE+0x6c>)
 8000626:	f000 fc61 	bl	8000eec <HAL_GPIO_WritePin>

	// stop Timer PWM
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800062a:	2100      	movs	r1, #0
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <TIMER_TEST_TONE+0x70>)
 800062e:	f001 fe2d 	bl	800228c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000632:	2100      	movs	r1, #0
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <TIMER_TEST_TONE+0x70>)
 8000636:	f002 fd87 	bl	8003148 <HAL_TIMEx_PWMN_Stop>

	// Disable Buzzer-logic circuit
	HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2102      	movs	r1, #2
 800063e:	4803      	ldr	r0, [pc, #12]	; (800064c <TIMER_TEST_TONE+0x68>)
 8000640:	f000 fc54 	bl	8000eec <HAL_GPIO_WritePin>


	return;
 8000644:	bf00      	nop
}
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40014000 	.word	0x40014000
 800064c:	48001000 	.word	0x48001000
 8000650:	48000800 	.word	0x48000800
 8000654:	2000002c 	.word	0x2000002c

08000658 <HAL_GPIO_EXTI_Callback>:
/*
 * brief@  GPIO_PUSH_BUTTON_PIN interrupt handler
 * retval None
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  //Check if interrupt occurred at the right PIN
  if(GPIO_Pin == Push_Buttom_Pin)
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	2b20      	cmp	r3, #32
 8000666:	d107      	bne.n	8000678 <HAL_GPIO_EXTI_Callback+0x20>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);  //clears wake-up flag
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_GPIO_EXTI_Callback+0x28>)
 800066a:	221f      	movs	r2, #31
 800066c:	619a      	str	r2, [r3, #24]

	  //Re-initialize system peripherals
	  SYSTEM_INIT();
 800066e:	f7ff fe1d 	bl	80002ac <SYSTEM_INIT>

	  //Set button interrupt flag
	  PUSH_BUTTON_INTERRUPT = TRUE;
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
  }

}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40007000 	.word	0x40007000
 8000684:	20000000 	.word	0x20000000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  break;
 8000690:	bf00      	nop
  }
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_MspInit+0x44>)
 80006a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_MspInit+0x44>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6613      	str	r3, [r2, #96]	; 0x60
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x44>)
 80006b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x44>)
 80006bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_MspInit+0x44>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6593      	str	r3, [r2, #88]	; 0x58
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_MspInit+0x44>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000

080006e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0a      	ldr	r2, [pc, #40]	; (800071c <HAL_TIM_Base_MspInit+0x38>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d10b      	bne.n	800070e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_TIM_Base_MspInit+0x3c>)
 80006f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fa:	4a09      	ldr	r2, [pc, #36]	; (8000720 <HAL_TIM_Base_MspInit+0x3c>)
 80006fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000700:	6613      	str	r3, [r2, #96]	; 0x60
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <HAL_TIM_Base_MspInit+0x3c>)
 8000704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40014000 	.word	0x40014000
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <HAL_TIM_MspPostInit+0x68>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d11e      	bne.n	8000784 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_TIM_MspPostInit+0x6c>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a11      	ldr	r2, [pc, #68]	; (8000790 <HAL_TIM_MspPostInit+0x6c>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_TIM_MspPostInit+0x6c>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800075e:	f000 fcd1 	bl	8001104 <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration
    PG10     ------> TIM15_CH1
    PG9     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000762:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000766:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000774:	230e      	movs	r3, #14
 8000776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <HAL_TIM_MspPostInit+0x70>)
 8000780:	f000 fa22 	bl	8000bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40014000 	.word	0x40014000
 8000790:	40021000 	.word	0x40021000
 8000794:	48001800 	.word	0x48001800

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f000 f89a 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Push_Buttom_Pin);
 80007f0:	2020      	movs	r0, #32
 80007f2:	f000 fb93 	bl	8000f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <SystemInit+0x20>)
 8000802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000806:	4a05      	ldr	r2, [pc, #20]	; (800081c <SystemInit+0x20>)
 8000808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800080c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000858 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000824:	f7ff ffea 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <LoopForever+0x6>)
  ldr r1, =_edata
 800082a:	490d      	ldr	r1, [pc, #52]	; (8000860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <LoopForever+0xe>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000840:	4c0a      	ldr	r4, [pc, #40]	; (800086c <LoopForever+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084e:	f002 fe0d 	bl	800346c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000852:	f7ff fcd3 	bl	80001fc <main>

08000856 <LoopForever>:

LoopForever:
    b LoopForever
 8000856:	e7fe      	b.n	8000856 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000858:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000864:	08003514 	.word	0x08003514
  ldr r2, =_sbss
 8000868:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800086c:	2000007c 	.word	0x2000007c

08000870 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_IRQHandler>

08000872 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000878:	2300      	movs	r3, #0
 800087a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f961 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000882:	200f      	movs	r0, #15
 8000884:	f000 f80e 	bl	80008a4 <HAL_InitTick>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	e001      	b.n	8000898 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000894:	f7ff ff02 	bl	800069c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000898:	79fb      	ldrb	r3, [r7, #7]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_InitTick+0x6c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d023      	beq.n	8000900 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_InitTick+0x70>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_InitTick+0x6c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f96d 	bl	8000bae <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10f      	bne.n	80008fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d809      	bhi.n	80008f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f937 	bl	8000b5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_InitTick+0x74>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	e007      	b.n	8000904 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e004      	b.n	8000904 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	e001      	b.n	8000904 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000904:	7bfb      	ldrb	r3, [r7, #15]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000000c 	.word	0x2000000c
 8000914:	20000004 	.word	0x20000004
 8000918:	20000008 	.word	0x20000008

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2000000c 	.word	0x2000000c
 8000940:	20000078 	.word	0x20000078

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000078 	.word	0x20000078

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff ffee 	bl	8000944 <HAL_GetTick>
 8000968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_Delay+0x44>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000982:	bf00      	nop
 8000984:	f7ff ffde 	bl	8000944 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000000c 	.word	0x2000000c

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db0b      	blt.n	8000a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 021f 	and.w	r2, r3, #31
 8000a20:	4907      	ldr	r1, [pc, #28]	; (8000a40 <__NVIC_EnableIRQ+0x38>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	2001      	movs	r0, #1
 8000a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f7ff ff8e 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff29 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff3e 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff8e 	bl	8000a98 <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5d 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff31 	bl	8000a08 <__NVIC_EnableIRQ>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffa2 	bl	8000b00 <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd6:	e166      	b.n	8000ea6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 8158 	beq.w	8000ea0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d005      	beq.n	8000c08 <HAL_GPIO_Init+0x40>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d130      	bne.n	8000c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2203      	movs	r2, #3
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c3e:	2201      	movs	r2, #1
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	091b      	lsrs	r3, r3, #4
 8000c54:	f003 0201 	and.w	r2, r3, #1
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d017      	beq.n	8000ca6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2203      	movs	r2, #3
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d123      	bne.n	8000cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	08da      	lsrs	r2, r3, #3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	220f      	movs	r2, #15
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	08da      	lsrs	r2, r3, #3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3208      	adds	r2, #8
 8000cf4:	6939      	ldr	r1, [r7, #16]
 8000cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0203 	and.w	r2, r3, #3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 80b2 	beq.w	8000ea0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3c:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <HAL_GPIO_Init+0x2fc>)
 8000d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d40:	4a60      	ldr	r2, [pc, #384]	; (8000ec4 <HAL_GPIO_Init+0x2fc>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6613      	str	r3, [r2, #96]	; 0x60
 8000d48:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <HAL_GPIO_Init+0x2fc>)
 8000d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d54:	4a5c      	ldr	r2, [pc, #368]	; (8000ec8 <HAL_GPIO_Init+0x300>)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d7e:	d02b      	beq.n	8000dd8 <HAL_GPIO_Init+0x210>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a52      	ldr	r2, [pc, #328]	; (8000ecc <HAL_GPIO_Init+0x304>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d025      	beq.n	8000dd4 <HAL_GPIO_Init+0x20c>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a51      	ldr	r2, [pc, #324]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d01f      	beq.n	8000dd0 <HAL_GPIO_Init+0x208>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <HAL_GPIO_Init+0x30c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d019      	beq.n	8000dcc <HAL_GPIO_Init+0x204>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4f      	ldr	r2, [pc, #316]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d013      	beq.n	8000dc8 <HAL_GPIO_Init+0x200>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <HAL_GPIO_Init+0x314>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d00d      	beq.n	8000dc4 <HAL_GPIO_Init+0x1fc>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <HAL_GPIO_Init+0x318>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d007      	beq.n	8000dc0 <HAL_GPIO_Init+0x1f8>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a4c      	ldr	r2, [pc, #304]	; (8000ee4 <HAL_GPIO_Init+0x31c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d101      	bne.n	8000dbc <HAL_GPIO_Init+0x1f4>
 8000db8:	2307      	movs	r3, #7
 8000dba:	e00e      	b.n	8000dda <HAL_GPIO_Init+0x212>
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	e00c      	b.n	8000dda <HAL_GPIO_Init+0x212>
 8000dc0:	2306      	movs	r3, #6
 8000dc2:	e00a      	b.n	8000dda <HAL_GPIO_Init+0x212>
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	e008      	b.n	8000dda <HAL_GPIO_Init+0x212>
 8000dc8:	2304      	movs	r3, #4
 8000dca:	e006      	b.n	8000dda <HAL_GPIO_Init+0x212>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e004      	b.n	8000dda <HAL_GPIO_Init+0x212>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e002      	b.n	8000dda <HAL_GPIO_Init+0x212>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <HAL_GPIO_Init+0x212>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	f002 0203 	and.w	r2, r2, #3
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	4093      	lsls	r3, r2
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dea:	4937      	ldr	r1, [pc, #220]	; (8000ec8 <HAL_GPIO_Init+0x300>)
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000df8:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e1c:	4a32      	ldr	r2, [pc, #200]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e46:	4a28      	ldr	r2, [pc, #160]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e70:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f47f ae91 	bne.w	8000bd8 <HAL_GPIO_Init+0x10>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	371c      	adds	r7, #28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	48000400 	.word	0x48000400
 8000ed0:	48000800 	.word	0x48000800
 8000ed4:	48000c00 	.word	0x48000c00
 8000ed8:	48001000 	.word	0x48001000
 8000edc:	48001400 	.word	0x48001400
 8000ee0:	48001800 	.word	0x48001800
 8000ee4:	48001c00 	.word	0x48001c00
 8000ee8:	40010400 	.word	0x40010400

08000eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000efc:	787b      	ldrb	r3, [r7, #1]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f28:	695a      	ldr	r2, [r3, #20]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);				//clears interrupt flag
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);				//calls interrupt handler
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fb8c 	bl	8000658 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010400 	.word	0x40010400

08000f4c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f5e:	d104      	bne.n	8000f6a <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f908 	bl	8001178 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8000f68:	e003      	b.n	8000f72 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8000f6a:	78fb      	ldrb	r3, [r7, #3]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f8d9 	bl	8001124 <HAL_PWREx_EnterSTOP0Mode>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8c:	d102      	bne.n	8000f94 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f92:	e00b      	b.n	8000fac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fa2:	d102      	bne.n	8000faa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa8:	e000      	b.n	8000fac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000faa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40007000 	.word	0x40007000

08000fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d141      	bne.n	800104e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fca:	4b4b      	ldr	r3, [pc, #300]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd6:	d131      	bne.n	800103c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fd8:	4b47      	ldr	r3, [pc, #284]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fde:	4a46      	ldr	r2, [pc, #280]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fe4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff0:	4a41      	ldr	r2, [pc, #260]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000ff8:	4b40      	ldr	r3, [pc, #256]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2232      	movs	r2, #50	; 0x32
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	4a3f      	ldr	r2, [pc, #252]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001004:	fba2 2303 	umull	r2, r3, r2, r3
 8001008:	0c9b      	lsrs	r3, r3, #18
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800100e:	e002      	b.n	8001016 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3b01      	subs	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001022:	d102      	bne.n	800102a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f2      	bne.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001036:	d158      	bne.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e057      	b.n	80010ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800103c:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001042:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001048:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800104c:	e04d      	b.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001054:	d141      	bne.n	80010da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001062:	d131      	bne.n	80010c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800107c:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2232      	movs	r2, #50	; 0x32
 800108a:	fb02 f303 	mul.w	r3, r2, r3
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	0c9b      	lsrs	r3, r3, #18
 8001096:	3301      	adds	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800109a:	e002      	b.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3b01      	subs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ae:	d102      	bne.n	80010b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f2      	bne.n	800109c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c2:	d112      	bne.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e011      	b.n	80010ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010d8:	e007      	b.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40007000 	.word	0x40007000
 80010fc:	20000004 	.word	0x20000004
 8001100:	431bde83 	.word	0x431bde83

08001104 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_PWREx_EnableVddIO2+0x1c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_PWREx_EnableVddIO2+0x1c>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6053      	str	r3, [r2, #4]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40007000 	.word	0x40007000

08001124 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001134:	f023 0307 	bic.w	r3, r3, #7
 8001138:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800114c:	bf30      	wfi
 800114e:	e002      	b.n	8001156 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001150:	bf40      	sev
    __WFE();
 8001152:	bf20      	wfe
    __WFE();
 8001154:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800115c:	f023 0304 	bic.w	r3, r3, #4
 8001160:	6113      	str	r3, [r2, #16]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40007000 	.word	0x40007000
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 0307 	bic.w	r3, r3, #7
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80011a4:	bf30      	wfi
 80011a6:	e002      	b.n	80011ae <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80011a8:	bf40      	sev
    __WFE();
 80011aa:	bf20      	wfe
    __WFE();
 80011ac:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6113      	str	r3, [r2, #16]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40007000 	.word	0x40007000
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	f000 bc08 	b.w	80019f4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e4:	4b96      	ldr	r3, [pc, #600]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ee:	4b94      	ldr	r3, [pc, #592]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80e4 	beq.w	80013ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <HAL_RCC_OscConfig+0x4c>
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b0c      	cmp	r3, #12
 8001210:	f040 808b 	bne.w	800132a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2b01      	cmp	r3, #1
 8001218:	f040 8087 	bne.w	800132a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800121c:	4b88      	ldr	r3, [pc, #544]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_OscConfig+0x64>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e3df      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1a      	ldr	r2, [r3, #32]
 8001238:	4b81      	ldr	r3, [pc, #516]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <HAL_RCC_OscConfig+0x7e>
 8001244:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800124c:	e005      	b.n	800125a <HAL_RCC_OscConfig+0x8a>
 800124e:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800125a:	4293      	cmp	r3, r2
 800125c:	d223      	bcs.n	80012a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fd94 	bl	8001d90 <RCC_SetFlashLatencyFromMSIRange>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e3c0      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001272:	4b73      	ldr	r3, [pc, #460]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a72      	ldr	r2, [pc, #456]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	496d      	ldr	r1, [pc, #436]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001290:	4b6b      	ldr	r3, [pc, #428]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	4968      	ldr	r1, [pc, #416]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
 80012a4:	e025      	b.n	80012f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a6:	4b66      	ldr	r3, [pc, #408]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a65      	ldr	r2, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b63      	ldr	r3, [pc, #396]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4960      	ldr	r1, [pc, #384]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c4:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	495b      	ldr	r1, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fd54 	bl	8001d90 <RCC_SetFlashLatencyFromMSIRange>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e380      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012f2:	f000 fcc1 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b51      	ldr	r3, [pc, #324]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	4950      	ldr	r1, [pc, #320]	; (8001444 <HAL_RCC_OscConfig+0x274>)
 8001304:	5ccb      	ldrb	r3, [r1, r3]
 8001306:	f003 031f 	and.w	r3, r3, #31
 800130a:	fa22 f303 	lsr.w	r3, r2, r3
 800130e:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_RCC_OscConfig+0x278>)
 8001310:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001312:	4b4e      	ldr	r3, [pc, #312]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fac4 	bl	80008a4 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d052      	beq.n	80013cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	e364      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d032      	beq.n	8001398 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001332:	4b43      	ldr	r3, [pc, #268]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a42      	ldr	r2, [pc, #264]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800133e:	f7ff fb01 	bl	8000944 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001346:	f7ff fafd 	bl	8000944 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e34d      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001364:	4b36      	ldr	r3, [pc, #216]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a35      	ldr	r2, [pc, #212]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b33      	ldr	r3, [pc, #204]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4930      	ldr	r1, [pc, #192]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	492b      	ldr	r1, [pc, #172]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
 8001396:	e01a      	b.n	80013ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001398:	4b29      	ldr	r3, [pc, #164]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a28      	ldr	r2, [pc, #160]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a4:	f7ff face 	bl	8000944 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ac:	f7ff faca 	bl	8000944 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e31a      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x1dc>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d073      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d005      	beq.n	80013ec <HAL_RCC_OscConfig+0x21c>
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d10e      	bne.n	8001404 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d063      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d15f      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e2f7      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x24c>
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e025      	b.n	8001468 <HAL_RCC_OscConfig+0x298>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d114      	bne.n	8001450 <HAL_RCC_OscConfig+0x280>
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a02      	ldr	r2, [pc, #8]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e013      	b.n	8001468 <HAL_RCC_OscConfig+0x298>
 8001440:	40021000 	.word	0x40021000
 8001444:	080034cc 	.word	0x080034cc
 8001448:	20000004 	.word	0x20000004
 800144c:	20000008 	.word	0x20000008
 8001450:	4ba0      	ldr	r3, [pc, #640]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a9f      	ldr	r2, [pc, #636]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b9d      	ldr	r3, [pc, #628]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a9c      	ldr	r2, [pc, #624]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fa68 	bl	8000944 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fa64 	bl	8000944 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e2b4      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148a:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x2a8>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fa54 	bl	8000944 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fa50 	bl	8000944 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e2a0      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b2:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2d0>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d060      	beq.n	8001590 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_OscConfig+0x310>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d119      	bne.n	800150e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d116      	bne.n	800150e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e0:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_OscConfig+0x328>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e27d      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	4973      	ldr	r1, [pc, #460]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150c:	e040      	b.n	8001590 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d023      	beq.n	800155e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6e      	ldr	r2, [pc, #440]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff fa0f 	bl	8000944 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fa0b 	bl	8000944 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e25b      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153c:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b62      	ldr	r3, [pc, #392]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	495f      	ldr	r1, [pc, #380]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
 800155c:	e018      	b.n	8001590 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a5c      	ldr	r2, [pc, #368]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff f9eb 	bl	8000944 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff f9e7 	bl	8000944 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e237      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d03c      	beq.n	8001616 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01c      	beq.n	80015de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a4:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015aa:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff f9c6 	bl	8000944 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff f9c2 	bl	8000944 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e212      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ef      	beq.n	80015bc <HAL_RCC_OscConfig+0x3ec>
 80015dc:	e01b      	b.n	8001616 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015de:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e4:	4a3b      	ldr	r2, [pc, #236]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7ff f9a9 	bl	8000944 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff f9a5 	bl	8000944 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1f5      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ef      	bne.n	80015f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80a6 	beq.w	8001770 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	4a26      	ldr	r2, [pc, #152]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163e:	6593      	str	r3, [r2, #88]	; 0x58
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164c:	2301      	movs	r3, #1
 800164e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d118      	bne.n	800168e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_RCC_OscConfig+0x508>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001668:	f7ff f96c 	bl	8000944 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001670:	f7ff f968 	bl	8000944 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1b8      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4d8>
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a6:	e029      	b.n	80016fc <HAL_RCC_OscConfig+0x52c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d115      	bne.n	80016dc <HAL_RCC_OscConfig+0x50c>
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d0:	e014      	b.n	80016fc <HAL_RCC_OscConfig+0x52c>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40007000 	.word	0x40007000
 80016dc:	4b9d      	ldr	r3, [pc, #628]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	4a9c      	ldr	r2, [pc, #624]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ec:	4b99      	ldr	r3, [pc, #612]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	4a98      	ldr	r2, [pc, #608]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d016      	beq.n	8001732 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff f91e 	bl	8000944 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff f91a 	bl	8000944 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e168      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001722:	4b8c      	ldr	r3, [pc, #560]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0ed      	beq.n	800170c <HAL_RCC_OscConfig+0x53c>
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff f907 	bl	8000944 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff f903 	bl	8000944 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	; 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e151      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001750:	4b80      	ldr	r3, [pc, #512]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ed      	bne.n	800173a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b7b      	ldr	r3, [pc, #492]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	4a7a      	ldr	r2, [pc, #488]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 800176a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800176e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01c      	beq.n	80017be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001784:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 8001786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800178a:	4a72      	ldr	r2, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff f8d6 	bl	8000944 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800179c:	f7ff f8d2 	bl	8000944 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e122      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ae:	4b69      	ldr	r3, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80017b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ef      	beq.n	800179c <HAL_RCC_OscConfig+0x5cc>
 80017bc:	e01b      	b.n	80017f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017be:	4b65      	ldr	r3, [pc, #404]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80017c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017c4:	4a63      	ldr	r2, [pc, #396]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff f8b9 	bl	8000944 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d6:	f7ff f8b5 	bl	8000944 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e105      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e8:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80017ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ef      	bne.n	80017d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80f9 	beq.w	80019f2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	2b02      	cmp	r3, #2
 8001806:	f040 80cf 	bne.w	80019a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800180a:	4b52      	ldr	r3, [pc, #328]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0203 	and.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	429a      	cmp	r2, r3
 800181c:	d12c      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	3b01      	subs	r3, #1
 800182a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d123      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d11b      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d113      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d109      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	3b01      	subs	r3, #1
 8001872:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d071      	beq.n	800195c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d068      	beq.n	8001950 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800187e:	4b35      	ldr	r3, [pc, #212]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d105      	bne.n	8001896 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800188a:	4b32      	ldr	r3, [pc, #200]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0ac      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2d      	ldr	r2, [pc, #180]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80018a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018a6:	f7ff f84d 	bl	8000944 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f849 	bl	8000944 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e099      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_RCC_OscConfig+0x788>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018dc:	3a01      	subs	r2, #1
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018e6:	0212      	lsls	r2, r2, #8
 80018e8:	4311      	orrs	r1, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018ee:	0852      	lsrs	r2, r2, #1
 80018f0:	3a01      	subs	r2, #1
 80018f2:	0552      	lsls	r2, r2, #21
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018fa:	0852      	lsrs	r2, r2, #1
 80018fc:	3a01      	subs	r2, #1
 80018fe:	0652      	lsls	r2, r2, #25
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001906:	06d2      	lsls	r2, r2, #27
 8001908:	430a      	orrs	r2, r1
 800190a:	4912      	ldr	r1, [pc, #72]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 800190c:	4313      	orrs	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4a0c      	ldr	r2, [pc, #48]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001926:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001928:	f7ff f80c 	bl	8000944 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f808 	bl	8000944 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e058      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194e:	e050      	b.n	80019f2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e04f      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
 8001954:	40021000 	.word	0x40021000
 8001958:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d144      	bne.n	80019f2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a23      	ldr	r2, [pc, #140]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a20      	ldr	r2, [pc, #128]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001980:	f7fe ffe0 	bl	8000944 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7fe ffdc 	bl	8000944 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e02c      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x7b8>
 80019a6:	e024      	b.n	80019f2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d01f      	beq.n	80019ee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 80019b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7fe ffc3 	bl	8000944 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7fe ffbf 	bl	8000944 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e00f      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4905      	ldr	r1, [pc, #20]	; (80019fc <HAL_RCC_OscConfig+0x82c>)
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_RCC_OscConfig+0x830>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e001      	b.n	80019f2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	feeefffc 	.word	0xfeeefffc

08001a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e11d      	b.n	8001c58 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b90      	ldr	r3, [pc, #576]	; (8001c60 <HAL_RCC_ClockConfig+0x25c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <HAL_RCC_ClockConfig+0x25c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 020f 	bic.w	r2, r3, #15
 8001a32:	498b      	ldr	r1, [pc, #556]	; (8001c60 <HAL_RCC_ClockConfig+0x25c>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <HAL_RCC_ClockConfig+0x25c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e105      	b.n	8001c58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b81      	ldr	r3, [pc, #516]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d908      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b7e      	ldr	r3, [pc, #504]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	497b      	ldr	r1, [pc, #492]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d079      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d11e      	bne.n	8001acc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	4b75      	ldr	r3, [pc, #468]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0dc      	b.n	8001c58 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001a9e:	f000 f9d1 	bl	8001e44 <RCC_GetSysClockFreqFromPLLSource>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a70      	ldr	r2, [pc, #448]	; (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d946      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001aaa:	4b6e      	ldr	r3, [pc, #440]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d140      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ab6:	4b6b      	ldr	r3, [pc, #428]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001abe:	4a69      	ldr	r2, [pc, #420]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e035      	b.n	8001b38 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad4:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d115      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b9      	b.n	8001c58 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aec:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0ad      	b.n	8001c58 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0a5      	b.n	8001c58 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001b0c:	f000 f8b4 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a55      	ldr	r2, [pc, #340]	; (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d90f      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b18:	4b52      	ldr	r3, [pc, #328]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b24:	4b4f      	ldr	r3, [pc, #316]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b2c:	4a4d      	ldr	r2, [pc, #308]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b32:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b38:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f023 0203 	bic.w	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4947      	ldr	r1, [pc, #284]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b4a:	f7fe fefb 	bl	8000944 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7fe fef7 	bl	8000944 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e077      	b.n	8001c58 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b68:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 020c 	and.w	r2, r3, #12
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d1eb      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b80      	cmp	r3, #128	; 0x80
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b80:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a37      	ldr	r2, [pc, #220]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b8a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d010      	beq.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d208      	bcs.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	492b      	ldr	r1, [pc, #172]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_RCC_ClockConfig+0x25c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d210      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <HAL_RCC_ClockConfig+0x25c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 020f 	bic.w	r2, r3, #15
 8001bd0:	4923      	ldr	r1, [pc, #140]	; (8001c60 <HAL_RCC_ClockConfig+0x25c>)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_RCC_ClockConfig+0x25c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e036      	b.n	8001c58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	4918      	ldr	r1, [pc, #96]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4910      	ldr	r1, [pc, #64]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c28:	f000 f826 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <HAL_RCC_ClockConfig+0x268>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x26c>)
 8001c46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fe29 	bl	80008a4 <HAL_InitTick>
 8001c52:	4603      	mov	r3, r0
 8001c54:	73fb      	strb	r3, [r7, #15]

  return status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	04c4b400 	.word	0x04c4b400
 8001c6c:	080034cc 	.word	0x080034cc
 8001c70:	20000004 	.word	0x20000004
 8001c74:	20000008 	.word	0x20000008

08001c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c86:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c90:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x34>
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d121      	bne.n	8001cea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d11e      	bne.n	8001cea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10d      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	e004      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d134      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d003      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0xac>
 8001d1c:	e005      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d20:	617b      	str	r3, [r7, #20]
      break;
 8001d22:	e005      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d26:	617b      	str	r3, [r7, #20]
      break;
 8001d28:	e002      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	617b      	str	r3, [r7, #20]
      break;
 8001d2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	fb03 f202 	mul.w	r2, r3, r2
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	0e5b      	lsrs	r3, r3, #25
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	3301      	adds	r3, #1
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d70:	69bb      	ldr	r3, [r7, #24]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	080034dc 	.word	0x080034dc
 8001d88:	00f42400 	.word	0x00f42400
 8001d8c:	007a1200 	.word	0x007a1200

08001d90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001da8:	f7ff f8e8 	bl	8000f7c <HAL_PWREx_GetVoltageRange>
 8001dac:	6178      	str	r0, [r7, #20]
 8001dae:	e014      	b.n	8001dda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dba:	6593      	str	r3, [r2, #88]	; 0x58
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dc8:	f7ff f8d8 	bl	8000f7c <HAL_PWREx_GetVoltageRange>
 8001dcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	4a1a      	ldr	r2, [pc, #104]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de0:	d10b      	bne.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b80      	cmp	r3, #128	; 0x80
 8001de6:	d913      	bls.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2ba0      	cmp	r3, #160	; 0xa0
 8001dec:	d902      	bls.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dee:	2302      	movs	r3, #2
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e00d      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e00a      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8001dfe:	d902      	bls.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e004      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b70      	cmp	r3, #112	; 0x70
 8001e0a:	d101      	bne.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 020f 	bic.w	r2, r3, #15
 8001e18:	4909      	ldr	r1, [pc, #36]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40022000 	.word	0x40022000

08001e44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d00b      	beq.n	8001e72 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d825      	bhi.n	8001eac <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d008      	beq.n	8001e78 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d11f      	bne.n	8001eac <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e6e:	613b      	str	r3, [r7, #16]
    break;
 8001e70:	e01f      	b.n	8001eb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001e74:	613b      	str	r3, [r7, #16]
    break;
 8001e76:	e01c      	b.n	8001eb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e005      	b.n	8001ea0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	613b      	str	r3, [r7, #16]
    break;
 8001eaa:	e002      	b.n	8001eb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
    break;
 8001eb0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	fb03 f202 	mul.w	r2, r3, r2
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0e5b      	lsrs	r3, r3, #25
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001ef2:	683b      	ldr	r3, [r7, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40021000 	.word	0x40021000
 8001f04:	00f42400 	.word	0x00f42400
 8001f08:	007a1200 	.word	0x007a1200
 8001f0c:	080034dc 	.word	0x080034dc

08001f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e049      	b.n	8001fb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fbd4 	bl	80006e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f000 fc10 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e049      	b.n	8002064 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f841 	bl	800206c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f000 fbb9 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <HAL_TIM_PWM_Start+0x24>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	bf14      	ite	ne
 800209c:	2301      	movne	r3, #1
 800209e:	2300      	moveq	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e03c      	b.n	800211e <HAL_TIM_PWM_Start+0x9e>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d109      	bne.n	80020be <HAL_TIM_PWM_Start+0x3e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	bf14      	ite	ne
 80020b6:	2301      	movne	r3, #1
 80020b8:	2300      	moveq	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	e02f      	b.n	800211e <HAL_TIM_PWM_Start+0x9e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d109      	bne.n	80020d8 <HAL_TIM_PWM_Start+0x58>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	bf14      	ite	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	2300      	moveq	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	e022      	b.n	800211e <HAL_TIM_PWM_Start+0x9e>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d109      	bne.n	80020f2 <HAL_TIM_PWM_Start+0x72>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	e015      	b.n	800211e <HAL_TIM_PWM_Start+0x9e>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	d109      	bne.n	800210c <HAL_TIM_PWM_Start+0x8c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e008      	b.n	800211e <HAL_TIM_PWM_Start+0x9e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e09c      	b.n	8002260 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d104      	bne.n	8002136 <HAL_TIM_PWM_Start+0xb6>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002134:	e023      	b.n	800217e <HAL_TIM_PWM_Start+0xfe>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d104      	bne.n	8002146 <HAL_TIM_PWM_Start+0xc6>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002144:	e01b      	b.n	800217e <HAL_TIM_PWM_Start+0xfe>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d104      	bne.n	8002156 <HAL_TIM_PWM_Start+0xd6>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002154:	e013      	b.n	800217e <HAL_TIM_PWM_Start+0xfe>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d104      	bne.n	8002166 <HAL_TIM_PWM_Start+0xe6>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002164:	e00b      	b.n	800217e <HAL_TIM_PWM_Start+0xfe>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b10      	cmp	r3, #16
 800216a:	d104      	bne.n	8002176 <HAL_TIM_PWM_Start+0xf6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002174:	e003      	b.n	800217e <HAL_TIM_PWM_Start+0xfe>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	6839      	ldr	r1, [r7, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fefe 	bl	8002f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a35      	ldr	r2, [pc, #212]	; (8002268 <HAL_TIM_PWM_Start+0x1e8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_TIM_PWM_Start+0x13e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a34      	ldr	r2, [pc, #208]	; (800226c <HAL_TIM_PWM_Start+0x1ec>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00e      	beq.n	80021be <HAL_TIM_PWM_Start+0x13e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a32      	ldr	r2, [pc, #200]	; (8002270 <HAL_TIM_PWM_Start+0x1f0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d009      	beq.n	80021be <HAL_TIM_PWM_Start+0x13e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a31      	ldr	r2, [pc, #196]	; (8002274 <HAL_TIM_PWM_Start+0x1f4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d004      	beq.n	80021be <HAL_TIM_PWM_Start+0x13e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2f      	ldr	r2, [pc, #188]	; (8002278 <HAL_TIM_PWM_Start+0x1f8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_PWM_Start+0x142>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_TIM_PWM_Start+0x144>
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a22      	ldr	r2, [pc, #136]	; (8002268 <HAL_TIM_PWM_Start+0x1e8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01d      	beq.n	800221e <HAL_TIM_PWM_Start+0x19e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d018      	beq.n	800221e <HAL_TIM_PWM_Start+0x19e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a22      	ldr	r2, [pc, #136]	; (800227c <HAL_TIM_PWM_Start+0x1fc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_TIM_PWM_Start+0x19e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a21      	ldr	r2, [pc, #132]	; (8002280 <HAL_TIM_PWM_Start+0x200>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00e      	beq.n	800221e <HAL_TIM_PWM_Start+0x19e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <HAL_TIM_PWM_Start+0x204>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d009      	beq.n	800221e <HAL_TIM_PWM_Start+0x19e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_TIM_PWM_Start+0x1ec>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d004      	beq.n	800221e <HAL_TIM_PWM_Start+0x19e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <HAL_TIM_PWM_Start+0x1f0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d115      	bne.n	800224a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_TIM_PWM_Start+0x208>)
 8002226:	4013      	ands	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b06      	cmp	r3, #6
 800222e:	d015      	beq.n	800225c <HAL_TIM_PWM_Start+0x1dc>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002236:	d011      	beq.n	800225c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002248:	e008      	b.n	800225c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e000      	b.n	800225e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40013400 	.word	0x40013400
 8002270:	40014000 	.word	0x40014000
 8002274:	40014400 	.word	0x40014400
 8002278:	40014800 	.word	0x40014800
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800
 8002284:	40000c00 	.word	0x40000c00
 8002288:	00010007 	.word	0x00010007

0800228c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	6839      	ldr	r1, [r7, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fe72 	bl	8002f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3e      	ldr	r2, [pc, #248]	; (80023a4 <HAL_TIM_PWM_Stop+0x118>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_TIM_PWM_Stop+0x4a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a3d      	ldr	r2, [pc, #244]	; (80023a8 <HAL_TIM_PWM_Stop+0x11c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00e      	beq.n	80022d6 <HAL_TIM_PWM_Stop+0x4a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <HAL_TIM_PWM_Stop+0x120>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_TIM_PWM_Stop+0x4a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a3a      	ldr	r2, [pc, #232]	; (80023b0 <HAL_TIM_PWM_Stop+0x124>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_TIM_PWM_Stop+0x4a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a38      	ldr	r2, [pc, #224]	; (80023b4 <HAL_TIM_PWM_Stop+0x128>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_TIM_PWM_Stop+0x4e>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_TIM_PWM_Stop+0x50>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6a1a      	ldr	r2, [r3, #32]
 80022e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10f      	bne.n	8002310 <HAL_TIM_PWM_Stop+0x84>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6a1a      	ldr	r2, [r3, #32]
 80022f6:	f240 4344 	movw	r3, #1092	; 0x444
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d107      	bne.n	8002310 <HAL_TIM_PWM_Stop+0x84>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800230e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	f241 1311 	movw	r3, #4369	; 0x1111
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10f      	bne.n	8002340 <HAL_TIM_PWM_Stop+0xb4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6a1a      	ldr	r2, [r3, #32]
 8002326:	f240 4344 	movw	r3, #1092	; 0x444
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_TIM_PWM_Stop+0xb4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d104      	bne.n	8002350 <HAL_TIM_PWM_Stop+0xc4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800234e:	e023      	b.n	8002398 <HAL_TIM_PWM_Stop+0x10c>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b04      	cmp	r3, #4
 8002354:	d104      	bne.n	8002360 <HAL_TIM_PWM_Stop+0xd4>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800235e:	e01b      	b.n	8002398 <HAL_TIM_PWM_Stop+0x10c>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b08      	cmp	r3, #8
 8002364:	d104      	bne.n	8002370 <HAL_TIM_PWM_Stop+0xe4>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800236e:	e013      	b.n	8002398 <HAL_TIM_PWM_Stop+0x10c>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d104      	bne.n	8002380 <HAL_TIM_PWM_Stop+0xf4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800237e:	e00b      	b.n	8002398 <HAL_TIM_PWM_Stop+0x10c>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b10      	cmp	r3, #16
 8002384:	d104      	bne.n	8002390 <HAL_TIM_PWM_Stop+0x104>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800238e:	e003      	b.n	8002398 <HAL_TIM_PWM_Stop+0x10c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40013400 	.word	0x40013400
 80023ac:	40014000 	.word	0x40014000
 80023b0:	40014400 	.word	0x40014400
 80023b4:	40014800 	.word	0x40014800

080023b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0ff      	b.n	80025d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b14      	cmp	r3, #20
 80023e2:	f200 80f0 	bhi.w	80025c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80023e6:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ec:	08002441 	.word	0x08002441
 80023f0:	080025c7 	.word	0x080025c7
 80023f4:	080025c7 	.word	0x080025c7
 80023f8:	080025c7 	.word	0x080025c7
 80023fc:	08002481 	.word	0x08002481
 8002400:	080025c7 	.word	0x080025c7
 8002404:	080025c7 	.word	0x080025c7
 8002408:	080025c7 	.word	0x080025c7
 800240c:	080024c3 	.word	0x080024c3
 8002410:	080025c7 	.word	0x080025c7
 8002414:	080025c7 	.word	0x080025c7
 8002418:	080025c7 	.word	0x080025c7
 800241c:	08002503 	.word	0x08002503
 8002420:	080025c7 	.word	0x080025c7
 8002424:	080025c7 	.word	0x080025c7
 8002428:	080025c7 	.word	0x080025c7
 800242c:	08002545 	.word	0x08002545
 8002430:	080025c7 	.word	0x080025c7
 8002434:	080025c7 	.word	0x080025c7
 8002438:	080025c7 	.word	0x080025c7
 800243c:	08002585 	.word	0x08002585
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fa2e 	bl	80028a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0208 	orr.w	r2, r2, #8
 800245a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0204 	bic.w	r2, r2, #4
 800246a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6999      	ldr	r1, [r3, #24]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	619a      	str	r2, [r3, #24]
      break;
 800247e:	e0a5      	b.n	80025cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fa9e 	bl	80029c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800249a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6999      	ldr	r1, [r3, #24]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	021a      	lsls	r2, r3, #8
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	619a      	str	r2, [r3, #24]
      break;
 80024c0:	e084      	b.n	80025cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fb07 	bl	8002adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0208 	orr.w	r2, r2, #8
 80024dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0204 	bic.w	r2, r2, #4
 80024ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69d9      	ldr	r1, [r3, #28]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	61da      	str	r2, [r3, #28]
      break;
 8002500:	e064      	b.n	80025cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fb6f 	bl	8002bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69d9      	ldr	r1, [r3, #28]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	021a      	lsls	r2, r3, #8
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	61da      	str	r2, [r3, #28]
      break;
 8002542:	e043      	b.n	80025cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fbb8 	bl	8002cc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0208 	orr.w	r2, r2, #8
 800255e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002582:	e023      	b.n	80025cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fbfc 	bl	8002d88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	021a      	lsls	r2, r3, #8
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025c4:	e002      	b.n	80025cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	75fb      	strb	r3, [r7, #23]
      break;
 80025ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop

080025e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x1c>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e0b6      	b.n	800276a <HAL_TIM_ConfigClockSource+0x18a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800261e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002638:	d03e      	beq.n	80026b8 <HAL_TIM_ConfigClockSource+0xd8>
 800263a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263e:	f200 8087 	bhi.w	8002750 <HAL_TIM_ConfigClockSource+0x170>
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	f000 8086 	beq.w	8002756 <HAL_TIM_ConfigClockSource+0x176>
 800264a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264e:	d87f      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x170>
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d01a      	beq.n	800268a <HAL_TIM_ConfigClockSource+0xaa>
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d87b      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x170>
 8002658:	2b60      	cmp	r3, #96	; 0x60
 800265a:	d050      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x11e>
 800265c:	2b60      	cmp	r3, #96	; 0x60
 800265e:	d877      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x170>
 8002660:	2b50      	cmp	r3, #80	; 0x50
 8002662:	d03c      	beq.n	80026de <HAL_TIM_ConfigClockSource+0xfe>
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d873      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x170>
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d058      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x13e>
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d86f      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x170>
 8002670:	2b30      	cmp	r3, #48	; 0x30
 8002672:	d064      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15e>
 8002674:	2b30      	cmp	r3, #48	; 0x30
 8002676:	d86b      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x170>
 8002678:	2b20      	cmp	r3, #32
 800267a:	d060      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15e>
 800267c:	2b20      	cmp	r3, #32
 800267e:	d867      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x170>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d05c      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15e>
 8002684:	2b10      	cmp	r3, #16
 8002686:	d05a      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15e>
 8002688:	e062      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800269a:	f000 fc55 	bl	8002f48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	609a      	str	r2, [r3, #8]
      break;
 80026b6:	e04f      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026c8:	f000 fc3e 	bl	8002f48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026da:	609a      	str	r2, [r3, #8]
      break;
 80026dc:	e03c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ea:	461a      	mov	r2, r3
 80026ec:	f000 fbb2 	bl	8002e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2150      	movs	r1, #80	; 0x50
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fc0b 	bl	8002f12 <TIM_ITRx_SetConfig>
      break;
 80026fc:	e02c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800270a:	461a      	mov	r2, r3
 800270c:	f000 fbd1 	bl	8002eb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2160      	movs	r1, #96	; 0x60
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fbfb 	bl	8002f12 <TIM_ITRx_SetConfig>
      break;
 800271c:	e01c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272a:	461a      	mov	r2, r3
 800272c:	f000 fb92 	bl	8002e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fbeb 	bl	8002f12 <TIM_ITRx_SetConfig>
      break;
 800273c:	e00c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f000 fbe2 	bl	8002f12 <TIM_ITRx_SetConfig>
      break;
 800274e:	e003      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      break;
 8002754:	e000      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a40      	ldr	r2, [pc, #256]	; (8002888 <TIM_Base_SetConfig+0x114>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d013      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002792:	d00f      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a3d      	ldr	r2, [pc, #244]	; (800288c <TIM_Base_SetConfig+0x118>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00b      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a3c      	ldr	r2, [pc, #240]	; (8002890 <TIM_Base_SetConfig+0x11c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3b      	ldr	r2, [pc, #236]	; (8002894 <TIM_Base_SetConfig+0x120>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d003      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a3a      	ldr	r2, [pc, #232]	; (8002898 <TIM_Base_SetConfig+0x124>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d108      	bne.n	80027c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a2f      	ldr	r2, [pc, #188]	; (8002888 <TIM_Base_SetConfig+0x114>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01f      	beq.n	800280e <TIM_Base_SetConfig+0x9a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d4:	d01b      	beq.n	800280e <TIM_Base_SetConfig+0x9a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a2c      	ldr	r2, [pc, #176]	; (800288c <TIM_Base_SetConfig+0x118>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d017      	beq.n	800280e <TIM_Base_SetConfig+0x9a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <TIM_Base_SetConfig+0x11c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <TIM_Base_SetConfig+0x9a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <TIM_Base_SetConfig+0x120>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00f      	beq.n	800280e <TIM_Base_SetConfig+0x9a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a29      	ldr	r2, [pc, #164]	; (8002898 <TIM_Base_SetConfig+0x124>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00b      	beq.n	800280e <TIM_Base_SetConfig+0x9a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <TIM_Base_SetConfig+0x128>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <TIM_Base_SetConfig+0x9a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <TIM_Base_SetConfig+0x12c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d003      	beq.n	800280e <TIM_Base_SetConfig+0x9a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <TIM_Base_SetConfig+0x130>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <TIM_Base_SetConfig+0x114>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00f      	beq.n	800286c <TIM_Base_SetConfig+0xf8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <TIM_Base_SetConfig+0x124>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00b      	beq.n	800286c <TIM_Base_SetConfig+0xf8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a11      	ldr	r2, [pc, #68]	; (800289c <TIM_Base_SetConfig+0x128>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d007      	beq.n	800286c <TIM_Base_SetConfig+0xf8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <TIM_Base_SetConfig+0x12c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d003      	beq.n	800286c <TIM_Base_SetConfig+0xf8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <TIM_Base_SetConfig+0x130>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40000400 	.word	0x40000400
 8002890:	40000800 	.word	0x40000800
 8002894:	40000c00 	.word	0x40000c00
 8002898:	40013400 	.word	0x40013400
 800289c:	40014000 	.word	0x40014000
 80028a0:	40014400 	.word	0x40014400
 80028a4:	40014800 	.word	0x40014800

080028a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f023 0201 	bic.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f023 0302 	bic.w	r3, r3, #2
 80028f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a2c      	ldr	r2, [pc, #176]	; (80029b4 <TIM_OC1_SetConfig+0x10c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00f      	beq.n	8002928 <TIM_OC1_SetConfig+0x80>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <TIM_OC1_SetConfig+0x110>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00b      	beq.n	8002928 <TIM_OC1_SetConfig+0x80>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <TIM_OC1_SetConfig+0x114>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_OC1_SetConfig+0x80>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <TIM_OC1_SetConfig+0x118>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_OC1_SetConfig+0x80>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a28      	ldr	r2, [pc, #160]	; (80029c4 <TIM_OC1_SetConfig+0x11c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d10c      	bne.n	8002942 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f023 0308 	bic.w	r3, r3, #8
 800292e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <TIM_OC1_SetConfig+0x10c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00f      	beq.n	800296a <TIM_OC1_SetConfig+0xc2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <TIM_OC1_SetConfig+0x110>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00b      	beq.n	800296a <TIM_OC1_SetConfig+0xc2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <TIM_OC1_SetConfig+0x114>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <TIM_OC1_SetConfig+0xc2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <TIM_OC1_SetConfig+0x118>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d003      	beq.n	800296a <TIM_OC1_SetConfig+0xc2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <TIM_OC1_SetConfig+0x11c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d111      	bne.n	800298e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	621a      	str	r2, [r3, #32]
}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40013400 	.word	0x40013400
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40014400 	.word	0x40014400
 80029c4:	40014800 	.word	0x40014800

080029c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f023 0210 	bic.w	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 0320 	bic.w	r3, r3, #32
 8002a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a28      	ldr	r2, [pc, #160]	; (8002ac8 <TIM_OC2_SetConfig+0x100>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_OC2_SetConfig+0x6c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a27      	ldr	r2, [pc, #156]	; (8002acc <TIM_OC2_SetConfig+0x104>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10d      	bne.n	8002a50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <TIM_OC2_SetConfig+0x100>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00f      	beq.n	8002a78 <TIM_OC2_SetConfig+0xb0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <TIM_OC2_SetConfig+0x104>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00b      	beq.n	8002a78 <TIM_OC2_SetConfig+0xb0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <TIM_OC2_SetConfig+0x108>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <TIM_OC2_SetConfig+0xb0>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <TIM_OC2_SetConfig+0x10c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d003      	beq.n	8002a78 <TIM_OC2_SetConfig+0xb0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <TIM_OC2_SetConfig+0x110>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d113      	bne.n	8002aa0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	621a      	str	r2, [r3, #32]
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40013400 	.word	0x40013400
 8002ad0:	40014000 	.word	0x40014000
 8002ad4:	40014400 	.word	0x40014400
 8002ad8:	40014800 	.word	0x40014800

08002adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0303 	bic.w	r3, r3, #3
 8002b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <TIM_OC3_SetConfig+0xfc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <TIM_OC3_SetConfig+0x6a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <TIM_OC3_SetConfig+0x100>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10d      	bne.n	8002b62 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <TIM_OC3_SetConfig+0xfc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00f      	beq.n	8002b8a <TIM_OC3_SetConfig+0xae>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <TIM_OC3_SetConfig+0x100>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <TIM_OC3_SetConfig+0xae>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <TIM_OC3_SetConfig+0x104>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <TIM_OC3_SetConfig+0xae>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <TIM_OC3_SetConfig+0x108>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <TIM_OC3_SetConfig+0xae>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <TIM_OC3_SetConfig+0x10c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d113      	bne.n	8002bb2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	621a      	str	r2, [r3, #32]
}
 8002bcc:	bf00      	nop
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40013400 	.word	0x40013400
 8002be0:	40014000 	.word	0x40014000
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800

08002bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	031b      	lsls	r3, r3, #12
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a18      	ldr	r2, [pc, #96]	; (8002cac <TIM_OC4_SetConfig+0xc0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00f      	beq.n	8002c70 <TIM_OC4_SetConfig+0x84>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <TIM_OC4_SetConfig+0xc4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00b      	beq.n	8002c70 <TIM_OC4_SetConfig+0x84>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <TIM_OC4_SetConfig+0xc8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <TIM_OC4_SetConfig+0x84>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <TIM_OC4_SetConfig+0xcc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <TIM_OC4_SetConfig+0x84>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <TIM_OC4_SetConfig+0xd0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d109      	bne.n	8002c84 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40013400 	.word	0x40013400
 8002cb4:	40014000 	.word	0x40014000
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40014800 	.word	0x40014800

08002cc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <TIM_OC5_SetConfig+0xb4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00f      	beq.n	8002d3a <TIM_OC5_SetConfig+0x7a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <TIM_OC5_SetConfig+0xb8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00b      	beq.n	8002d3a <TIM_OC5_SetConfig+0x7a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <TIM_OC5_SetConfig+0xbc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <TIM_OC5_SetConfig+0x7a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <TIM_OC5_SetConfig+0xc0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d003      	beq.n	8002d3a <TIM_OC5_SetConfig+0x7a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <TIM_OC5_SetConfig+0xc4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d109      	bne.n	8002d4e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	621a      	str	r2, [r3, #32]
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40013400 	.word	0x40013400
 8002d7c:	40014000 	.word	0x40014000
 8002d80:	40014400 	.word	0x40014400
 8002d84:	40014800 	.word	0x40014800

08002d88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	051b      	lsls	r3, r3, #20
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <TIM_OC6_SetConfig+0xb8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00f      	beq.n	8002e04 <TIM_OC6_SetConfig+0x7c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <TIM_OC6_SetConfig+0xbc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <TIM_OC6_SetConfig+0x7c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a16      	ldr	r2, [pc, #88]	; (8002e48 <TIM_OC6_SetConfig+0xc0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_OC6_SetConfig+0x7c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <TIM_OC6_SetConfig+0xc4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_OC6_SetConfig+0x7c>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <TIM_OC6_SetConfig+0xc8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d109      	bne.n	8002e18 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40013400 	.word	0x40013400
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	40014400 	.word	0x40014400
 8002e50:	40014800 	.word	0x40014800

08002e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f023 0201 	bic.w	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f023 030a 	bic.w	r3, r3, #10
 8002e90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	621a      	str	r2, [r3, #32]
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f023 0210 	bic.w	r2, r3, #16
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	031b      	lsls	r3, r3, #12
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	621a      	str	r2, [r3, #32]
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b085      	sub	sp, #20
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f043 0307 	orr.w	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	021a      	lsls	r2, r3, #8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	609a      	str	r2, [r3, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	401a      	ands	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1a      	ldr	r2, [r3, #32]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_TIMEx_PWMN_Start+0x24>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e022      	b.n	800303e <HAL_TIMEx_PWMN_Start+0x6a>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d109      	bne.n	8003012 <HAL_TIMEx_PWMN_Start+0x3e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	bf14      	ite	ne
 800300a:	2301      	movne	r3, #1
 800300c:	2300      	moveq	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	e015      	b.n	800303e <HAL_TIMEx_PWMN_Start+0x6a>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d109      	bne.n	800302c <HAL_TIMEx_PWMN_Start+0x58>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e008      	b.n	800303e <HAL_TIMEx_PWMN_Start+0x6a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e06e      	b.n	8003124 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d104      	bne.n	8003056 <HAL_TIMEx_PWMN_Start+0x82>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003054:	e013      	b.n	800307e <HAL_TIMEx_PWMN_Start+0xaa>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d104      	bne.n	8003066 <HAL_TIMEx_PWMN_Start+0x92>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003064:	e00b      	b.n	800307e <HAL_TIMEx_PWMN_Start+0xaa>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d104      	bne.n	8003076 <HAL_TIMEx_PWMN_Start+0xa2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003074:	e003      	b.n	800307e <HAL_TIMEx_PWMN_Start+0xaa>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2204      	movs	r2, #4
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f9c2 	bl	8003410 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800309a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a22      	ldr	r2, [pc, #136]	; (800312c <HAL_TIMEx_PWMN_Start+0x158>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01d      	beq.n	80030e2 <HAL_TIMEx_PWMN_Start+0x10e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ae:	d018      	beq.n	80030e2 <HAL_TIMEx_PWMN_Start+0x10e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <HAL_TIMEx_PWMN_Start+0x15c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_TIMEx_PWMN_Start+0x10e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1d      	ldr	r2, [pc, #116]	; (8003134 <HAL_TIMEx_PWMN_Start+0x160>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_TIMEx_PWMN_Start+0x10e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <HAL_TIMEx_PWMN_Start+0x164>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_TIMEx_PWMN_Start+0x10e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1a      	ldr	r2, [pc, #104]	; (800313c <HAL_TIMEx_PWMN_Start+0x168>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_TIMEx_PWMN_Start+0x10e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a18      	ldr	r2, [pc, #96]	; (8003140 <HAL_TIMEx_PWMN_Start+0x16c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d115      	bne.n	800310e <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_TIMEx_PWMN_Start+0x170>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d015      	beq.n	8003120 <HAL_TIMEx_PWMN_Start+0x14c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fa:	d011      	beq.n	8003120 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310c:	e008      	b.n	8003120 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e000      	b.n	8003122 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003120:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40012c00 	.word	0x40012c00
 8003130:	40000400 	.word	0x40000400
 8003134:	40000800 	.word	0x40000800
 8003138:	40000c00 	.word	0x40000c00
 800313c:	40013400 	.word	0x40013400
 8003140:	40014000 	.word	0x40014000
 8003144:	00010007 	.word	0x00010007

08003148 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f958 	bl	8003410 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a1a      	ldr	r2, [r3, #32]
 8003166:	f241 1311 	movw	r3, #4369	; 0x1111
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10f      	bne.n	8003190 <HAL_TIMEx_PWMN_Stop+0x48>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	f240 4344 	movw	r3, #1092	; 0x444
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_TIMEx_PWMN_Stop+0x48>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800318e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	f241 1311 	movw	r3, #4369	; 0x1111
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10f      	bne.n	80031c0 <HAL_TIMEx_PWMN_Stop+0x78>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	f240 4344 	movw	r3, #1092	; 0x444
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d107      	bne.n	80031c0 <HAL_TIMEx_PWMN_Stop+0x78>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d104      	bne.n	80031d0 <HAL_TIMEx_PWMN_Stop+0x88>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ce:	e013      	b.n	80031f8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d104      	bne.n	80031e0 <HAL_TIMEx_PWMN_Stop+0x98>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031de:	e00b      	b.n	80031f8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d104      	bne.n	80031f0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031ee:	e003      	b.n	80031f8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003218:	2302      	movs	r3, #2
 800321a:	e068      	b.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2e      	ldr	r2, [pc, #184]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a2d      	ldr	r2, [pc, #180]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003256:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003268:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01d      	beq.n	80032c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328e:	d018      	beq.n	80032c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00e      	beq.n	80032c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a18      	ldr	r2, [pc, #96]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d009      	beq.n	80032c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a13      	ldr	r2, [pc, #76]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a14      	ldr	r2, [pc, #80]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10c      	bne.n	80032dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40012c00 	.word	0x40012c00
 8003300:	40013400 	.word	0x40013400
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40014000 	.word	0x40014000

08003314 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800332c:	2302      	movs	r3, #2
 800332e:	e065      	b.n	80033fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a16      	ldr	r2, [pc, #88]	; (8003408 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a14      	ldr	r2, [pc, #80]	; (800340c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d115      	bne.n	80033ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	051b      	lsls	r3, r3, #20
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40013400 	.word	0x40013400

08003410 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	2204      	movs	r2, #4
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1a      	ldr	r2, [r3, #32]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	43db      	mvns	r3, r3
 8003432:	401a      	ands	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <memset>:
 800345a:	4402      	add	r2, r0
 800345c:	4603      	mov	r3, r0
 800345e:	4293      	cmp	r3, r2
 8003460:	d100      	bne.n	8003464 <memset+0xa>
 8003462:	4770      	bx	lr
 8003464:	f803 1b01 	strb.w	r1, [r3], #1
 8003468:	e7f9      	b.n	800345e <memset+0x4>
	...

0800346c <__libc_init_array>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	4d0d      	ldr	r5, [pc, #52]	; (80034a4 <__libc_init_array+0x38>)
 8003470:	4c0d      	ldr	r4, [pc, #52]	; (80034a8 <__libc_init_array+0x3c>)
 8003472:	1b64      	subs	r4, r4, r5
 8003474:	10a4      	asrs	r4, r4, #2
 8003476:	2600      	movs	r6, #0
 8003478:	42a6      	cmp	r6, r4
 800347a:	d109      	bne.n	8003490 <__libc_init_array+0x24>
 800347c:	4d0b      	ldr	r5, [pc, #44]	; (80034ac <__libc_init_array+0x40>)
 800347e:	4c0c      	ldr	r4, [pc, #48]	; (80034b0 <__libc_init_array+0x44>)
 8003480:	f000 f818 	bl	80034b4 <_init>
 8003484:	1b64      	subs	r4, r4, r5
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	2600      	movs	r6, #0
 800348a:	42a6      	cmp	r6, r4
 800348c:	d105      	bne.n	800349a <__libc_init_array+0x2e>
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	f855 3b04 	ldr.w	r3, [r5], #4
 8003494:	4798      	blx	r3
 8003496:	3601      	adds	r6, #1
 8003498:	e7ee      	b.n	8003478 <__libc_init_array+0xc>
 800349a:	f855 3b04 	ldr.w	r3, [r5], #4
 800349e:	4798      	blx	r3
 80034a0:	3601      	adds	r6, #1
 80034a2:	e7f2      	b.n	800348a <__libc_init_array+0x1e>
 80034a4:	0800350c 	.word	0x0800350c
 80034a8:	0800350c 	.word	0x0800350c
 80034ac:	0800350c 	.word	0x0800350c
 80034b0:	08003510 	.word	0x08003510

080034b4 <_init>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr

080034c0 <_fini>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr
