
nimmsta_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003208  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003404  08003404  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003404  08003404  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003404  08003404  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800340c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  0800341c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800341c  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a328  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001772  00000000  00000000  0002a3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  0002bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b2  00000000  00000000  0002c668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ec6e  00000000  00000000  0002cf1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc53  00000000  00000000  0005bb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d5f5  00000000  00000000  000677db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002eb4  00000000  00000000  00184dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00187c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080033ac 	.word	0x080033ac

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	080033ac 	.word	0x080033ac

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

  HAL_Init();
 8000200:	f000 fb21 	bl	8000846 <HAL_Init>

  SystemClock_Config();
 8000204:	f000 f85a 	bl	80002bc <SystemClock_Config>

  MX_GPIO_Init();
 8000208:	f000 f960 	bl	80004cc <MX_GPIO_Init>
  MX_TIM15_Init();
 800020c:	f000 f8bc 	bl	8000388 <MX_TIM15_Init>

  // Issue test tone
  TIMER_TEST_TONE();
 8000210:	f000 f9da 	bl	80005c8 <TIMER_TEST_TONE>


  while (PUSH_BUTTON_INTERRUPT)
 8000214:	e040      	b.n	8000298 <main+0x9c>
  {

	    //Load timer auto-reload register with note frequency
	    TIM15->ARR = TIM15_PWM_FREQ_C6;				//C6 Note frequency
 8000216:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <main+0xac>)
 8000218:	f643 32b1 	movw	r2, #15281	; 0x3bb1
 800021c:	62da      	str	r2, [r3, #44]	; 0x2c

		// Enable Buzzer-logic circuit
		HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	2102      	movs	r1, #2
 8000222:	4822      	ldr	r0, [pc, #136]	; (80002ac <main+0xb0>)
 8000224:	f000 fe4c 	bl	8000ec0 <HAL_GPIO_WritePin>
		// Enable H-bridge functioning
		HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022e:	4820      	ldr	r0, [pc, #128]	; (80002b0 <main+0xb4>)
 8000230:	f000 fe46 	bl	8000ec0 <HAL_GPIO_WritePin>

		// start Timer PWM
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000234:	2100      	movs	r1, #0
 8000236:	481f      	ldr	r0, [pc, #124]	; (80002b4 <main+0xb8>)
 8000238:	f001 fe9e 	bl	8001f78 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	481d      	ldr	r0, [pc, #116]	; (80002b4 <main+0xb8>)
 8000240:	f002 fe44 	bl	8002ecc <HAL_TIMEx_PWMN_Start>
		HAL_Delay(500);								//wait 500ms
 8000244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000248:	f000 fb72 	bl	8000930 <HAL_Delay>

		TIM15->ARR = TIM15_PWM_FREQ_D6;				//D6 Note frequency
 800024c:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <main+0xac>)
 800024e:	f243 5231 	movw	r2, #13617	; 0x3531
 8000252:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_Delay(500);								//wait 500ms
 8000254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000258:	f000 fb6a 	bl	8000930 <HAL_Delay>

		TIM15->ARR = TIM15_PWM_FREQ_E6;				//E6 Note frequency
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <main+0xac>)
 800025e:	f642 7262 	movw	r2, #12130	; 0x2f62
 8000262:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_Delay(500);								//wait 500ms
 8000264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000268:	f000 fb62 	bl	8000930 <HAL_Delay>

		// Disable H-bridge
		HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000272:	480f      	ldr	r0, [pc, #60]	; (80002b0 <main+0xb4>)
 8000274:	f000 fe24 	bl	8000ec0 <HAL_GPIO_WritePin>

		//Stop Timer PWM
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8000278:	2100      	movs	r1, #0
 800027a:	480e      	ldr	r0, [pc, #56]	; (80002b4 <main+0xb8>)
 800027c:	f001 ff82 	bl	8002184 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000280:	2100      	movs	r1, #0
 8000282:	480c      	ldr	r0, [pc, #48]	; (80002b4 <main+0xb8>)
 8000284:	f002 fedc 	bl	8003040 <HAL_TIMEx_PWMN_Stop>

		// Disable Buzzer-logic circuit
		HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4807      	ldr	r0, [pc, #28]	; (80002ac <main+0xb0>)
 800028e:	f000 fe17 	bl	8000ec0 <HAL_GPIO_WritePin>


		PUSH_BUTTON_INTERRUPT = FALSE;		//reset flag to exit while-loop
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <main+0xbc>)
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
  while (PUSH_BUTTON_INTERRUPT)
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <main+0xbc>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d1ba      	bne.n	8000216 <main+0x1a>
 80002a0:	2300      	movs	r3, #0

  }
  /* USER CODE END 3 */
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40014000 	.word	0x40014000
 80002ac:	48001000 	.word	0x48001000
 80002b0:	48000800 	.word	0x48000800
 80002b4:	2000002c 	.word	0x2000002c
 80002b8:	20000000 	.word	0x20000000

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b098      	sub	sp, #96	; 0x60
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 031c 	add.w	r3, r7, #28
 80002c6:	2244      	movs	r2, #68	; 0x44
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f003 f841 	bl	8003352 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e4:	f000 fe3c 	bl	8000f60 <HAL_PWREx_ControlVoltageScaling>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002ee:	f000 f9b9 	bl	8000664 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2340      	movs	r3, #64	; 0x40
 80002fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000300:	2300      	movs	r3, #0
 8000302:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 031c 	add.w	r3, r7, #28
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fedd 	bl	80010c8 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000314:	f000 f9a6 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	2301      	movs	r3, #1
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032c:	f107 0308 	add.w	r3, r7, #8
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fae2 	bl	80018fc <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800033e:	f000 f991 	bl	8000664 <Error_Handler>


  /*
   * Disable Low-speed External clock to use PC14 as a standard GPIO pin
   */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <SystemClock_Config+0xc8>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <SystemClock_Config+0xc8>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <SystemClock_Config+0xc8>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);			//Low-speed External Oscillator Switched OFF
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <SystemClock_Config+0xc8>)
 800035c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000360:	4a08      	ldr	r2, [pc, #32]	; (8000384 <SystemClock_Config+0xc8>)
 8000362:	f023 0301 	bic.w	r3, r3, #1
 8000366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <SystemClock_Config+0xc8>)
 800036c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <SystemClock_Config+0xc8>)
 8000372:	f023 0304 	bic.w	r3, r3, #4
 8000376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

}
 800037a:	bf00      	nop
 800037c:	3760      	adds	r7, #96	; 0x60
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b09a      	sub	sp, #104	; 0x68
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
 80003b8:	615a      	str	r2, [r3, #20]
 80003ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	222c      	movs	r2, #44	; 0x2c
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 ffc5 	bl	8003352 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80003c8:	4b3e      	ldr	r3, [pc, #248]	; (80004c4 <MX_TIM15_Init+0x13c>)
 80003ca:	4a3f      	ldr	r2, [pc, #252]	; (80004c8 <MX_TIM15_Init+0x140>)
 80003cc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80003ce:	4b3d      	ldr	r3, [pc, #244]	; (80004c4 <MX_TIM15_Init+0x13c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d4:	4b3b      	ldr	r3, [pc, #236]	; (80004c4 <MX_TIM15_Init+0x13c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 80003da:	4b3a      	ldr	r3, [pc, #232]	; (80004c4 <MX_TIM15_Init+0x13c>)
 80003dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80003e0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e2:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <MX_TIM15_Init+0x13c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 1;
 80003e8:	4b36      	ldr	r3, [pc, #216]	; (80004c4 <MX_TIM15_Init+0x13c>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ee:	4b35      	ldr	r3, [pc, #212]	; (80004c4 <MX_TIM15_Init+0x13c>)
 80003f0:	2280      	movs	r2, #128	; 0x80
 80003f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80003f4:	4833      	ldr	r0, [pc, #204]	; (80004c4 <MX_TIM15_Init+0x13c>)
 80003f6:	f001 fd07 	bl	8001e08 <HAL_TIM_Base_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000400:	f000 f930 	bl	8000664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000408:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800040a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800040e:	4619      	mov	r1, r3
 8000410:	482c      	ldr	r0, [pc, #176]	; (80004c4 <MX_TIM15_Init+0x13c>)
 8000412:	f002 f861 	bl	80024d8 <HAL_TIM_ConfigClockSource>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800041c:	f000 f922 	bl	8000664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000420:	4828      	ldr	r0, [pc, #160]	; (80004c4 <MX_TIM15_Init+0x13c>)
 8000422:	f001 fd48 	bl	8001eb6 <HAL_TIM_PWM_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800042c:	f000 f91a 	bl	8000664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000438:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800043c:	4619      	mov	r1, r3
 800043e:	4821      	ldr	r0, [pc, #132]	; (80004c4 <MX_TIM15_Init+0x13c>)
 8000440:	f002 fe5c 	bl	80030fc <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800044a:	f000 f90b 	bl	8000664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800044e:	2360      	movs	r3, #96	; 0x60
 8000450:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000;
 8000452:	f241 3388 	movw	r3, #5000	; 0x1388
 8000456:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000458:	2300      	movs	r3, #0
 800045a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800045c:	2300      	movs	r3, #0
 800045e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000460:	2300      	movs	r3, #0
 8000462:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000464:	2300      	movs	r3, #0
 8000466:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000468:	2300      	movs	r3, #0
 800046a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800046c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000470:	2200      	movs	r2, #0
 8000472:	4619      	mov	r1, r3
 8000474:	4813      	ldr	r0, [pc, #76]	; (80004c4 <MX_TIM15_Init+0x13c>)
 8000476:	f001 ff1b 	bl	80022b0 <HAL_TIM_PWM_ConfigChannel>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000480:	f000 f8f0 	bl	8000664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8000490:	230a      	movs	r3, #10
 8000492:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	4807      	ldr	r0, [pc, #28]	; (80004c4 <MX_TIM15_Init+0x13c>)
 80004a8:	f002 feb0 	bl	800320c <HAL_TIMEx_ConfigBreakDeadTime>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80004b2:	f000 f8d7 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80004b6:	4803      	ldr	r0, [pc, #12]	; (80004c4 <MX_TIM15_Init+0x13c>)
 80004b8:	f000 f91e 	bl	80006f8 <HAL_TIM_MspPostInit>

}
 80004bc:	bf00      	nop
 80004be:	3768      	adds	r7, #104	; 0x68
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	2000002c 	.word	0x2000002c
 80004c8:	40014000 	.word	0x40014000

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	4b36      	ldr	r3, [pc, #216]	; (80005bc <MX_GPIO_Init+0xf0>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a35      	ldr	r2, [pc, #212]	; (80005bc <MX_GPIO_Init+0xf0>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b33      	ldr	r3, [pc, #204]	; (80005bc <MX_GPIO_Init+0xf0>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b30      	ldr	r3, [pc, #192]	; (80005bc <MX_GPIO_Init+0xf0>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a2f      	ldr	r2, [pc, #188]	; (80005bc <MX_GPIO_Init+0xf0>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <MX_GPIO_Init+0xf0>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0304 	and.w	r3, r3, #4
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <MX_GPIO_Init+0xf0>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a29      	ldr	r2, [pc, #164]	; (80005bc <MX_GPIO_Init+0xf0>)
 8000518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <MX_GPIO_Init+0xf0>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800052a:	f000 fdbd 	bl	80010a8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2102      	movs	r1, #2
 8000532:	4823      	ldr	r0, [pc, #140]	; (80005c0 <MX_GPIO_Init+0xf4>)
 8000534:	f000 fcc4 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053e:	4821      	ldr	r0, [pc, #132]	; (80005c4 <MX_GPIO_Init+0xf8>)
 8000540:	f000 fcbe 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CPU_BUZZER_DISABLE_OUT_Pin */
  GPIO_InitStruct.Pin = CPU_BUZZER_DISABLE_OUT_Pin;
 8000544:	2302      	movs	r3, #2
 8000546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CPU_BUZZER_DISABLE_OUT_GPIO_Port, &GPIO_InitStruct);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4619      	mov	r1, r3
 800055a:	4819      	ldr	r0, [pc, #100]	; (80005c0 <MX_GPIO_Init+0xf4>)
 800055c:	f000 fb1e 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_BUZZER_SLEEP_OUT_Pin */

  // Configure GPIO pin output level
  HAL_GPIO_WritePin(GPIOC, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2102      	movs	r1, #2
 8000564:	4817      	ldr	r0, [pc, #92]	; (80005c4 <MX_GPIO_Init+0xf8>)
 8000566:	f000 fcab 	bl	8000ec0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = CPU_BUZZER_SLEEP_OUT_Pin;
 800056a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800056e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CPU_BUZZER_SLEEP_OUT_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4619      	mov	r1, r3
 8000582:	4810      	ldr	r0, [pc, #64]	; (80005c4 <MX_GPIO_Init+0xf8>)
 8000584:	f000 fb0a 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_Buttom_Pin */
  GPIO_InitStruct.Pin = Push_Buttom_Pin;
 8000588:	2320      	movs	r3, #32
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Push_Buttom_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4619      	mov	r1, r3
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <MX_GPIO_Init+0xf8>)
 800059e:	f000 fafd 	bl	8000b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2017      	movs	r0, #23
 80005a8:	f000 fac1 	bl	8000b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005ac:	2017      	movs	r0, #23
 80005ae:	f000 fada 	bl	8000b66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b2:	bf00      	nop
 80005b4:	3720      	adds	r7, #32
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48001000 	.word	0x48001000
 80005c4:	48000800 	.word	0x48000800

080005c8 <TIMER_TEST_TONE>:



/* Test tone at startup*/
void TIMER_TEST_TONE()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	//Load timer auto-reload register with test-tone frequency
	TIM15->ARR = TIM15_PWM_FREQ_880;
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <TIMER_TEST_TONE+0x64>)
 80005ce:	f244 7205 	movw	r2, #18181	; 0x4705
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Buzzer-logic circuit
	HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2102      	movs	r1, #2
 80005d8:	4815      	ldr	r0, [pc, #84]	; (8000630 <TIMER_TEST_TONE+0x68>)
 80005da:	f000 fc71 	bl	8000ec0 <HAL_GPIO_WritePin>
	// Enable H-bridge functioning
	HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e4:	4813      	ldr	r0, [pc, #76]	; (8000634 <TIMER_TEST_TONE+0x6c>)
 80005e6:	f000 fc6b 	bl	8000ec0 <HAL_GPIO_WritePin>


	// start Timer PWM
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80005ea:	2100      	movs	r1, #0
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <TIMER_TEST_TONE+0x70>)
 80005ee:	f001 fcc3 	bl	8001f78 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 80005f2:	2100      	movs	r1, #0
 80005f4:	4810      	ldr	r0, [pc, #64]	; (8000638 <TIMER_TEST_TONE+0x70>)
 80005f6:	f002 fc69 	bl	8002ecc <HAL_TIMEx_PWMN_Start>

	HAL_Delay(1000); 								//wait 1sec
 80005fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fe:	f000 f997 	bl	8000930 <HAL_Delay>

	// Disable H-bridge
	HAL_GPIO_WritePin(CPU_BUZZER_SLEEP_OUT_GPIO_Port, CPU_BUZZER_SLEEP_OUT_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <TIMER_TEST_TONE+0x6c>)
 800060a:	f000 fc59 	bl	8000ec0 <HAL_GPIO_WritePin>

	// stop Timer PWM
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800060e:	2100      	movs	r1, #0
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <TIMER_TEST_TONE+0x70>)
 8000612:	f001 fdb7 	bl	8002184 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	4807      	ldr	r0, [pc, #28]	; (8000638 <TIMER_TEST_TONE+0x70>)
 800061a:	f002 fd11 	bl	8003040 <HAL_TIMEx_PWMN_Stop>

	// Disable Buzzer-logic circuit
	HAL_GPIO_WritePin(CPU_BUZZER_DISABLE_OUT_GPIO_Port, CPU_BUZZER_DISABLE_OUT_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2102      	movs	r1, #2
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <TIMER_TEST_TONE+0x68>)
 8000624:	f000 fc4c 	bl	8000ec0 <HAL_GPIO_WritePin>


	return;
 8000628:	bf00      	nop
}
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40014000 	.word	0x40014000
 8000630:	48001000 	.word	0x48001000
 8000634:	48000800 	.word	0x48000800
 8000638:	2000002c 	.word	0x2000002c

0800063c <HAL_GPIO_EXTI_Callback>:



/* INTERRUPT HANDLER */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == Push_Buttom_Pin)
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	2b20      	cmp	r3, #32
 800064a:	d102      	bne.n	8000652 <HAL_GPIO_EXTI_Callback+0x16>
  {
	  PUSH_BUTTON_INTERRUPT = TRUE;
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <HAL_GPIO_EXTI_Callback+0x24>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
  }

}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000000 	.word	0x20000000

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	e7fe      	b.n	800066c <Error_Handler+0x8>
	...

08000670 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_MspInit+0x44>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_MspInit+0x44>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6613      	str	r3, [r2, #96]	; 0x60
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_MspInit+0x44>)
 8000684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_MspInit+0x44>)
 8000690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_MspInit+0x44>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	6593      	str	r3, [r2, #88]	; 0x58
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_MspInit+0x44>)
 800069c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <HAL_TIM_Base_MspInit+0x38>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d10b      	bne.n	80006e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ce:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006d4:	6613      	str	r3, [r2, #96]	; 0x60
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40014000 	.word	0x40014000
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a12      	ldr	r2, [pc, #72]	; (8000760 <HAL_TIM_MspPostInit+0x68>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d11e      	bne.n	8000758 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_TIM_MspPostInit+0x6c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <HAL_TIM_MspPostInit+0x6c>)
 8000720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_TIM_MspPostInit+0x6c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000732:	f000 fcb9 	bl	80010a8 <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration
    PG10     ------> TIM15_CH1
    PG9     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000736:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800073a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000748:	230e      	movs	r3, #14
 800074a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <HAL_TIM_MspPostInit+0x70>)
 8000754:	f000 fa22 	bl	8000b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40014000 	.word	0x40014000
 8000764:	40021000 	.word	0x40021000
 8000768:	48001800 	.word	0x48001800

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f89a 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Push_Buttom_Pin);
 80007c4:	2020      	movs	r0, #32
 80007c6:	f000 fb93 	bl	8000ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SystemInit+0x20>)
 80007d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <SystemInit+0x20>)
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800082c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f8:	f7ff ffea 	bl	80007d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	; (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000822:	f002 fd9f 	bl	8003364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000826:	f7ff fce9 	bl	80001fc <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800082c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000838:	0800340c 	.word	0x0800340c
  ldr r2, =_sbss
 800083c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000840:	2000007c 	.word	0x2000007c

08000844 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_IRQHandler>

08000846 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000850:	2003      	movs	r0, #3
 8000852:	f000 f961 	bl	8000b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000856:	200f      	movs	r0, #15
 8000858:	f000 f80e 	bl	8000878 <HAL_InitTick>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	e001      	b.n	800086c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000868:	f7ff ff02 	bl	8000670 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800086c:	79fb      	ldrb	r3, [r7, #7]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_InitTick+0x6c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d023      	beq.n	80008d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_InitTick+0x70>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_InitTick+0x6c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f96d 	bl	8000b82 <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10f      	bne.n	80008ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d809      	bhi.n	80008c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b4:	2200      	movs	r2, #0
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f000 f937 	bl	8000b2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <HAL_InitTick+0x74>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e007      	b.n	80008d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e004      	b.n	80008d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]
 80008d2:	e001      	b.n	80008d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000000c 	.word	0x2000000c
 80008e8:	20000004 	.word	0x20000004
 80008ec:	20000008 	.word	0x20000008

080008f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x20>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_IncTick+0x24>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_IncTick+0x24>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	2000000c 	.word	0x2000000c
 8000914:	20000078 	.word	0x20000078

08000918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <HAL_GetTick+0x14>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000078 	.word	0x20000078

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff ffee 	bl	8000918 <HAL_GetTick>
 800093c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000956:	bf00      	nop
 8000958:	f7ff ffde 	bl	8000918 <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000000c 	.word	0x2000000c

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4907      	ldr	r1, [pc, #28]	; (8000a14 <__NVIC_EnableIRQ+0x38>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae4:	d301      	bcc.n	8000aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00f      	b.n	8000b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <SysTick_Config+0x40>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af2:	210f      	movs	r1, #15
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f7ff ff8e 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <SysTick_Config+0x40>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SysTick_Config+0x40>)
 8000b04:	2207      	movs	r2, #7
 8000b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	e000e010 	.word	0xe000e010

08000b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ff29 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b40:	f7ff ff3e 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	6978      	ldr	r0, [r7, #20]
 8000b4c:	f7ff ff8e 	bl	8000a6c <NVIC_EncodePriority>
 8000b50:	4602      	mov	r2, r0
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff5d 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff31 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffa2 	bl	8000ad4 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000baa:	e166      	b.n	8000e7a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 8158 	beq.w	8000e74 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d005      	beq.n	8000bdc <HAL_GPIO_Init+0x40>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d130      	bne.n	8000c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	f003 0201 	and.w	r2, r3, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d017      	beq.n	8000c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d123      	bne.n	8000cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	6939      	ldr	r1, [r7, #16]
 8000cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0203 	and.w	r2, r3, #3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80b2 	beq.w	8000e74 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	4b61      	ldr	r3, [pc, #388]	; (8000e98 <HAL_GPIO_Init+0x2fc>)
 8000d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d14:	4a60      	ldr	r2, [pc, #384]	; (8000e98 <HAL_GPIO_Init+0x2fc>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1c:	4b5e      	ldr	r3, [pc, #376]	; (8000e98 <HAL_GPIO_Init+0x2fc>)
 8000d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d28:	4a5c      	ldr	r2, [pc, #368]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d52:	d02b      	beq.n	8000dac <HAL_GPIO_Init+0x210>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a52      	ldr	r2, [pc, #328]	; (8000ea0 <HAL_GPIO_Init+0x304>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d025      	beq.n	8000da8 <HAL_GPIO_Init+0x20c>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a51      	ldr	r2, [pc, #324]	; (8000ea4 <HAL_GPIO_Init+0x308>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d01f      	beq.n	8000da4 <HAL_GPIO_Init+0x208>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a50      	ldr	r2, [pc, #320]	; (8000ea8 <HAL_GPIO_Init+0x30c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d019      	beq.n	8000da0 <HAL_GPIO_Init+0x204>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a4f      	ldr	r2, [pc, #316]	; (8000eac <HAL_GPIO_Init+0x310>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d013      	beq.n	8000d9c <HAL_GPIO_Init+0x200>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <HAL_GPIO_Init+0x314>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00d      	beq.n	8000d98 <HAL_GPIO_Init+0x1fc>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a4d      	ldr	r2, [pc, #308]	; (8000eb4 <HAL_GPIO_Init+0x318>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0x1f8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a4c      	ldr	r2, [pc, #304]	; (8000eb8 <HAL_GPIO_Init+0x31c>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d101      	bne.n	8000d90 <HAL_GPIO_Init+0x1f4>
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	e00e      	b.n	8000dae <HAL_GPIO_Init+0x212>
 8000d90:	2308      	movs	r3, #8
 8000d92:	e00c      	b.n	8000dae <HAL_GPIO_Init+0x212>
 8000d94:	2306      	movs	r3, #6
 8000d96:	e00a      	b.n	8000dae <HAL_GPIO_Init+0x212>
 8000d98:	2305      	movs	r3, #5
 8000d9a:	e008      	b.n	8000dae <HAL_GPIO_Init+0x212>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	e006      	b.n	8000dae <HAL_GPIO_Init+0x212>
 8000da0:	2303      	movs	r3, #3
 8000da2:	e004      	b.n	8000dae <HAL_GPIO_Init+0x212>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e002      	b.n	8000dae <HAL_GPIO_Init+0x212>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <HAL_GPIO_Init+0x212>
 8000dac:	2300      	movs	r3, #0
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	f002 0203 	and.w	r2, r2, #3
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	4093      	lsls	r3, r2
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dbe:	4937      	ldr	r1, [pc, #220]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dcc:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000df0:	4a32      	ldr	r2, [pc, #200]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e1a:	4a28      	ldr	r2, [pc, #160]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e44:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f47f ae91 	bne.w	8000bac <HAL_GPIO_Init+0x10>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48001000 	.word	0x48001000
 8000eb0:	48001400 	.word	0x48001400
 8000eb4:	48001800 	.word	0x48001800
 8000eb8:	48001c00 	.word	0x48001c00
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);				//clears interrupt flag
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);				//calls interrupt handler
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fb94 	bl	800063c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40010400 	.word	0x40010400

08000f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f30:	d102      	bne.n	8000f38 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f36:	e00b      	b.n	8000f50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f46:	d102      	bne.n	8000f4e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4c:	e000      	b.n	8000f50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000f4e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40007000 	.word	0x40007000

08000f60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d141      	bne.n	8000ff2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f6e:	4b4b      	ldr	r3, [pc, #300]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7a:	d131      	bne.n	8000fe0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f82:	4a46      	ldr	r2, [pc, #280]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	4b43      	ldr	r3, [pc, #268]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f94:	4a41      	ldr	r2, [pc, #260]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000f9c:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2232      	movs	r2, #50	; 0x32
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	4a3f      	ldr	r2, [pc, #252]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	0c9b      	lsrs	r3, r3, #18
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb2:	e002      	b.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc6:	d102      	bne.n	8000fce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f2      	bne.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fda:	d158      	bne.n	800108e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e057      	b.n	8001090 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ff0:	e04d      	b.n	800108e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff8:	d141      	bne.n	800107e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001006:	d131      	bne.n	800106c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800100e:	4a23      	ldr	r2, [pc, #140]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001014:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001020:	4a1e      	ldr	r2, [pc, #120]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2232      	movs	r2, #50	; 0x32
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	0c9b      	lsrs	r3, r3, #18
 800103a:	3301      	adds	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800103e:	e002      	b.n	8001046 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3b01      	subs	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001052:	d102      	bne.n	800105a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f2      	bne.n	8001040 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001066:	d112      	bne.n	800108e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e011      	b.n	8001090 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001078:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800107c:	e007      	b.n	800108e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40007000 	.word	0x40007000
 80010a0:	20000004 	.word	0x20000004
 80010a4:	431bde83 	.word	0x431bde83

080010a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6053      	str	r3, [r2, #4]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40007000 	.word	0x40007000

080010c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f000 bc08 	b.w	80018ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010dc:	4b96      	ldr	r3, [pc, #600]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010e6:	4b94      	ldr	r3, [pc, #592]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80e4 	beq.w	80012c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_RCC_OscConfig+0x4c>
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	2b0c      	cmp	r3, #12
 8001108:	f040 808b 	bne.w	8001222 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b01      	cmp	r3, #1
 8001110:	f040 8087 	bne.w	8001222 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001114:	4b88      	ldr	r3, [pc, #544]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_OscConfig+0x64>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e3df      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a1a      	ldr	r2, [r3, #32]
 8001130:	4b81      	ldr	r3, [pc, #516]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <HAL_RCC_OscConfig+0x7e>
 800113c:	4b7e      	ldr	r3, [pc, #504]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001144:	e005      	b.n	8001152 <HAL_RCC_OscConfig+0x8a>
 8001146:	4b7c      	ldr	r3, [pc, #496]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001152:	4293      	cmp	r3, r2
 8001154:	d223      	bcs.n	800119e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fd94 	bl	8001c88 <RCC_SetFlashLatencyFromMSIRange>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e3c0      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800116a:	4b73      	ldr	r3, [pc, #460]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a72      	ldr	r2, [pc, #456]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b70      	ldr	r3, [pc, #448]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	496d      	ldr	r1, [pc, #436]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001188:	4b6b      	ldr	r3, [pc, #428]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	4968      	ldr	r1, [pc, #416]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
 800119c:	e025      	b.n	80011ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119e:	4b66      	ldr	r3, [pc, #408]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a65      	ldr	r2, [pc, #404]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b63      	ldr	r3, [pc, #396]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4960      	ldr	r1, [pc, #384]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011bc:	4b5e      	ldr	r3, [pc, #376]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	495b      	ldr	r1, [pc, #364]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fd54 	bl	8001c88 <RCC_SetFlashLatencyFromMSIRange>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e380      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011ea:	f000 fcc1 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 80011ee:	4602      	mov	r2, r0
 80011f0:	4b51      	ldr	r3, [pc, #324]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	4950      	ldr	r1, [pc, #320]	; (800133c <HAL_RCC_OscConfig+0x274>)
 80011fc:	5ccb      	ldrb	r3, [r1, r3]
 80011fe:	f003 031f 	and.w	r3, r3, #31
 8001202:	fa22 f303 	lsr.w	r3, r2, r3
 8001206:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <HAL_RCC_OscConfig+0x278>)
 8001208:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800120a:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <HAL_RCC_OscConfig+0x27c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fb32 	bl	8000878 <HAL_InitTick>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d052      	beq.n	80012c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	e364      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d032      	beq.n	8001290 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800122a:	4b43      	ldr	r3, [pc, #268]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a42      	ldr	r2, [pc, #264]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001236:	f7ff fb6f 	bl	8000918 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800123e:	f7ff fb6b 	bl	8000918 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e34d      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001250:	4b39      	ldr	r3, [pc, #228]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a35      	ldr	r2, [pc, #212]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b33      	ldr	r3, [pc, #204]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4930      	ldr	r1, [pc, #192]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	492b      	ldr	r1, [pc, #172]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
 800128e:	e01a      	b.n	80012c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a28      	ldr	r2, [pc, #160]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb3c 	bl	8000918 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a4:	f7ff fb38 	bl	8000918 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e31a      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x1dc>
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d073      	beq.n	80013ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_OscConfig+0x21c>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b0c      	cmp	r3, #12
 80012dc:	d10e      	bne.n	80012fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d063      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d15f      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e2f7      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x24c>
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e025      	b.n	8001360 <HAL_RCC_OscConfig+0x298>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131c:	d114      	bne.n	8001348 <HAL_RCC_OscConfig+0x280>
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a02      	ldr	r2, [pc, #8]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e013      	b.n	8001360 <HAL_RCC_OscConfig+0x298>
 8001338:	40021000 	.word	0x40021000
 800133c:	080033c4 	.word	0x080033c4
 8001340:	20000004 	.word	0x20000004
 8001344:	20000008 	.word	0x20000008
 8001348:	4ba0      	ldr	r3, [pc, #640]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a9f      	ldr	r2, [pc, #636]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 800134e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b9d      	ldr	r3, [pc, #628]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a9c      	ldr	r2, [pc, #624]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d013      	beq.n	8001390 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fad6 	bl	8000918 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fad2 	bl	8000918 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e2b4      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001382:	4b92      	ldr	r3, [pc, #584]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x2a8>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fac2 	bl	8000918 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fabe 	bl	8000918 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e2a0      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013aa:	4b88      	ldr	r3, [pc, #544]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x2d0>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d060      	beq.n	8001488 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x310>
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d119      	bne.n	8001406 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d116      	bne.n	8001406 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d8:	4b7c      	ldr	r3, [pc, #496]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x328>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e27d      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b76      	ldr	r3, [pc, #472]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	061b      	lsls	r3, r3, #24
 80013fe:	4973      	ldr	r1, [pc, #460]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001404:	e040      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d023      	beq.n	8001456 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800140e:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6e      	ldr	r2, [pc, #440]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fa7d 	bl	8000918 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fa79 	bl	8000918 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e25b      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001434:	4b65      	ldr	r3, [pc, #404]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b62      	ldr	r3, [pc, #392]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	495f      	ldr	r1, [pc, #380]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
 8001454:	e018      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a5c      	ldr	r2, [pc, #368]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 800145c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fa59 	bl	8000918 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fa55 	bl	8000918 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e237      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d03c      	beq.n	800150e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149c:	4b4b      	ldr	r3, [pc, #300]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 800149e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a2:	4a4a      	ldr	r2, [pc, #296]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fa34 	bl	8000918 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fa30 	bl	8000918 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e212      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80014c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ef      	beq.n	80014b4 <HAL_RCC_OscConfig+0x3ec>
 80014d4:	e01b      	b.n	800150e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014dc:	4a3b      	ldr	r2, [pc, #236]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff fa17 	bl	8000918 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fa13 	bl	8000918 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e1f5      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001500:	4b32      	ldr	r3, [pc, #200]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ef      	bne.n	80014ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80a6 	beq.w	8001668 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10d      	bne.n	8001548 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	4a26      	ldr	r2, [pc, #152]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6593      	str	r3, [r2, #88]	; 0x58
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001544:	2301      	movs	r3, #1
 8001546:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HAL_RCC_OscConfig+0x508>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d118      	bne.n	8001586 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_RCC_OscConfig+0x508>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_RCC_OscConfig+0x508>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001560:	f7ff f9da 	bl	8000918 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001568:	f7ff f9d6 	bl	8000918 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1b8      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_RCC_OscConfig+0x508>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4d8>
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800159e:	e029      	b.n	80015f4 <HAL_RCC_OscConfig+0x52c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d115      	bne.n	80015d4 <HAL_RCC_OscConfig+0x50c>
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ae:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	4a03      	ldr	r2, [pc, #12]	; (80015cc <HAL_RCC_OscConfig+0x504>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x52c>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40007000 	.word	0x40007000
 80015d4:	4b9d      	ldr	r3, [pc, #628]	; (800184c <HAL_RCC_OscConfig+0x784>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015da:	4a9c      	ldr	r2, [pc, #624]	; (800184c <HAL_RCC_OscConfig+0x784>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015e4:	4b99      	ldr	r3, [pc, #612]	; (800184c <HAL_RCC_OscConfig+0x784>)
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ea:	4a98      	ldr	r2, [pc, #608]	; (800184c <HAL_RCC_OscConfig+0x784>)
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d016      	beq.n	800162a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff f98c 	bl	8000918 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff f988 	bl	8000918 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e168      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800161a:	4b8c      	ldr	r3, [pc, #560]	; (800184c <HAL_RCC_OscConfig+0x784>)
 800161c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0ed      	beq.n	8001604 <HAL_RCC_OscConfig+0x53c>
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162a:	f7ff f975 	bl	8000918 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff f971 	bl	8000918 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e151      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001648:	4b80      	ldr	r3, [pc, #512]	; (800184c <HAL_RCC_OscConfig+0x784>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ed      	bne.n	8001632 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001656:	7ffb      	ldrb	r3, [r7, #31]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165c:	4b7b      	ldr	r3, [pc, #492]	; (800184c <HAL_RCC_OscConfig+0x784>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	4a7a      	ldr	r2, [pc, #488]	; (800184c <HAL_RCC_OscConfig+0x784>)
 8001662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001666:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d03c      	beq.n	80016ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800167c:	4b73      	ldr	r3, [pc, #460]	; (800184c <HAL_RCC_OscConfig+0x784>)
 800167e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001682:	4a72      	ldr	r2, [pc, #456]	; (800184c <HAL_RCC_OscConfig+0x784>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff f944 	bl	8000918 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001694:	f7ff f940 	bl	8000918 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e122      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016a6:	4b69      	ldr	r3, [pc, #420]	; (800184c <HAL_RCC_OscConfig+0x784>)
 80016a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ef      	beq.n	8001694 <HAL_RCC_OscConfig+0x5cc>
 80016b4:	e01b      	b.n	80016ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016b6:	4b65      	ldr	r3, [pc, #404]	; (800184c <HAL_RCC_OscConfig+0x784>)
 80016b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016bc:	4a63      	ldr	r2, [pc, #396]	; (800184c <HAL_RCC_OscConfig+0x784>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff f927 	bl	8000918 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ce:	f7ff f923 	bl	8000918 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e105      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016e0:	4b5a      	ldr	r3, [pc, #360]	; (800184c <HAL_RCC_OscConfig+0x784>)
 80016e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1ef      	bne.n	80016ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80f9 	beq.w	80018ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	f040 80cf 	bne.w	80018a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001702:	4b52      	ldr	r3, [pc, #328]	; (800184c <HAL_RCC_OscConfig+0x784>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f003 0203 	and.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	429a      	cmp	r2, r3
 8001714:	d12c      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	3b01      	subs	r3, #1
 8001722:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d123      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001732:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d11b      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001742:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d113      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	3b01      	subs	r3, #1
 8001756:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d109      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d071      	beq.n	8001854 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d068      	beq.n	8001848 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001776:	4b35      	ldr	r3, [pc, #212]	; (800184c <HAL_RCC_OscConfig+0x784>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d105      	bne.n	800178e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_RCC_OscConfig+0x784>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0ac      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001792:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_RCC_OscConfig+0x784>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2d      	ldr	r2, [pc, #180]	; (800184c <HAL_RCC_OscConfig+0x784>)
 8001798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800179c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800179e:	f7ff f8bb 	bl	8000918 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff f8b7 	bl	8000918 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e099      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_OscConfig+0x784>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <HAL_RCC_OscConfig+0x784>)
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_RCC_OscConfig+0x788>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017d4:	3a01      	subs	r2, #1
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	4311      	orrs	r1, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017de:	0212      	lsls	r2, r2, #8
 80017e0:	4311      	orrs	r1, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017e6:	0852      	lsrs	r2, r2, #1
 80017e8:	3a01      	subs	r2, #1
 80017ea:	0552      	lsls	r2, r2, #21
 80017ec:	4311      	orrs	r1, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017f2:	0852      	lsrs	r2, r2, #1
 80017f4:	3a01      	subs	r2, #1
 80017f6:	0652      	lsls	r2, r2, #25
 80017f8:	4311      	orrs	r1, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017fe:	06d2      	lsls	r2, r2, #27
 8001800:	430a      	orrs	r2, r1
 8001802:	4912      	ldr	r1, [pc, #72]	; (800184c <HAL_RCC_OscConfig+0x784>)
 8001804:	4313      	orrs	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_RCC_OscConfig+0x784>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_RCC_OscConfig+0x784>)
 800180e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001812:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_RCC_OscConfig+0x784>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_RCC_OscConfig+0x784>)
 800181a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001820:	f7ff f87a 	bl	8000918 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff f876 	bl	8000918 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e058      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_RCC_OscConfig+0x784>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001846:	e050      	b.n	80018ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e04f      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
 800184c:	40021000 	.word	0x40021000
 8001850:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d144      	bne.n	80018ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 8001866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001876:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001878:	f7ff f84e 	bl	8000918 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff f84a 	bl	8000918 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e02c      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x7b8>
 800189e:	e024      	b.n	80018ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	d01f      	beq.n	80018e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 80018ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff f831 	bl	8000918 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff f82d 	bl	8000918 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e00f      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	4905      	ldr	r1, [pc, #20]	; (80018f4 <HAL_RCC_OscConfig+0x82c>)
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_OscConfig+0x830>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	60cb      	str	r3, [r1, #12]
 80018e4:	e001      	b.n	80018ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	feeefffc 	.word	0xfeeefffc

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e11d      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b90      	ldr	r3, [pc, #576]	; (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d910      	bls.n	8001944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b8d      	ldr	r3, [pc, #564]	; (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 020f 	bic.w	r2, r3, #15
 800192a:	498b      	ldr	r1, [pc, #556]	; (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e105      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d010      	beq.n	8001972 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b81      	ldr	r3, [pc, #516]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800195c:	429a      	cmp	r2, r3
 800195e:	d908      	bls.n	8001972 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b7e      	ldr	r3, [pc, #504]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	497b      	ldr	r1, [pc, #492]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d079      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d11e      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	4b75      	ldr	r3, [pc, #468]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0dc      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001996:	f000 f9d1 	bl	8001d3c <RCC_GetSysClockFreqFromPLLSource>
 800199a:	4603      	mov	r3, r0
 800199c:	4a70      	ldr	r2, [pc, #448]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d946      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019a2:	4b6e      	ldr	r3, [pc, #440]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d140      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ae:	4b6b      	ldr	r3, [pc, #428]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019b6:	4a69      	ldr	r2, [pc, #420]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e035      	b.n	8001a30 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019cc:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d115      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b9      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e4:	4b5d      	ldr	r3, [pc, #372]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0ad      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0a5      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001a04:	f000 f8b4 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a55      	ldr	r2, [pc, #340]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d90f      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a10:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a24:	4a4d      	ldr	r2, [pc, #308]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a30:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 0203 	bic.w	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4947      	ldr	r1, [pc, #284]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a42:	f7fe ff69 	bl	8000918 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f7fe ff65 	bl	8000918 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e077      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a60:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 020c 	and.w	r2, r3, #12
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d1eb      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2b80      	cmp	r3, #128	; 0x80
 8001a76:	d105      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a78:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a37      	ldr	r2, [pc, #220]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a82:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d010      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d208      	bcs.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	492b      	ldr	r1, [pc, #172]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d210      	bcs.n	8001ae2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 020f 	bic.w	r2, r3, #15
 8001ac8:	4923      	ldr	r1, [pc, #140]	; (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e036      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d008      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	4918      	ldr	r1, [pc, #96]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d009      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4910      	ldr	r1, [pc, #64]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b20:	f000 f826 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	490c      	ldr	r1, [pc, #48]	; (8001b64 <HAL_RCC_ClockConfig+0x268>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x26c>)
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fe97 	bl	8000878 <HAL_InitTick>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40022000 	.word	0x40022000
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	04c4b400 	.word	0x04c4b400
 8001b64:	080033c4 	.word	0x080033c4
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	20000008 	.word	0x20000008

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b88:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d121      	bne.n	8001be2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d11e      	bne.n	8001be2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	e005      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bcc:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10d      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	e004      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d134      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d003      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0xac>
 8001c14:	e005      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c18:	617b      	str	r3, [r7, #20]
      break;
 8001c1a:	e005      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c1e:	617b      	str	r3, [r7, #20]
      break;
 8001c20:	e002      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	617b      	str	r3, [r7, #20]
      break;
 8001c26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3301      	adds	r3, #1
 8001c34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	fb03 f202 	mul.w	r2, r3, r2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	0e5b      	lsrs	r3, r3, #25
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c68:	69bb      	ldr	r3, [r7, #24]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	080033d4 	.word	0x080033d4
 8001c80:	00f42400 	.word	0x00f42400
 8001c84:	007a1200 	.word	0x007a1200

08001c88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ca0:	f7ff f93e 	bl	8000f20 <HAL_PWREx_GetVoltageRange>
 8001ca4:	6178      	str	r0, [r7, #20]
 8001ca6:	e014      	b.n	8001cd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cc0:	f7ff f92e 	bl	8000f20 <HAL_PWREx_GetVoltageRange>
 8001cc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd8:	d10b      	bne.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	d913      	bls.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ce4:	d902      	bls.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	e00d      	b.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cec:	2301      	movs	r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	e00a      	b.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf6:	d902      	bls.n	8001cfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	e004      	b.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b70      	cmp	r3, #112	; 0x70
 8001d02:	d101      	bne.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d04:	2301      	movs	r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 020f 	bic.w	r2, r3, #15
 8001d10:	4909      	ldr	r1, [pc, #36]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40022000 	.word	0x40022000

08001d3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d42:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d00b      	beq.n	8001d6a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d825      	bhi.n	8001da4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d008      	beq.n	8001d70 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d11f      	bne.n	8001da4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001d64:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d66:	613b      	str	r3, [r7, #16]
    break;
 8001d68:	e01f      	b.n	8001daa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001d6a:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001d6c:	613b      	str	r3, [r7, #16]
    break;
 8001d6e:	e01c      	b.n	8001daa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e005      	b.n	8001d98 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001d98:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	613b      	str	r3, [r7, #16]
    break;
 8001da2:	e002      	b.n	8001daa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
    break;
 8001da8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	3301      	adds	r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	fb03 f202 	mul.w	r2, r3, r2
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0e5b      	lsrs	r3, r3, #25
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001dea:	683b      	ldr	r3, [r7, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	080033d4 	.word	0x080033d4

08001e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e049      	b.n	8001eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fc42 	bl	80006b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3304      	adds	r3, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4610      	mov	r0, r2
 8001e48:	f000 fc10 	bl	800266c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e049      	b.n	8001f5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d106      	bne.n	8001ee2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f841 	bl	8001f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	f000 fbb9 	bl	800266c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_TIM_PWM_Start+0x24>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e03c      	b.n	8002016 <HAL_TIM_PWM_Start+0x9e>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d109      	bne.n	8001fb6 <HAL_TIM_PWM_Start+0x3e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	e02f      	b.n	8002016 <HAL_TIM_PWM_Start+0x9e>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d109      	bne.n	8001fd0 <HAL_TIM_PWM_Start+0x58>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e022      	b.n	8002016 <HAL_TIM_PWM_Start+0x9e>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d109      	bne.n	8001fea <HAL_TIM_PWM_Start+0x72>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	e015      	b.n	8002016 <HAL_TIM_PWM_Start+0x9e>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d109      	bne.n	8002004 <HAL_TIM_PWM_Start+0x8c>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e008      	b.n	8002016 <HAL_TIM_PWM_Start+0x9e>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e09c      	b.n	8002158 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d104      	bne.n	800202e <HAL_TIM_PWM_Start+0xb6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800202c:	e023      	b.n	8002076 <HAL_TIM_PWM_Start+0xfe>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b04      	cmp	r3, #4
 8002032:	d104      	bne.n	800203e <HAL_TIM_PWM_Start+0xc6>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800203c:	e01b      	b.n	8002076 <HAL_TIM_PWM_Start+0xfe>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d104      	bne.n	800204e <HAL_TIM_PWM_Start+0xd6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800204c:	e013      	b.n	8002076 <HAL_TIM_PWM_Start+0xfe>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d104      	bne.n	800205e <HAL_TIM_PWM_Start+0xe6>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800205c:	e00b      	b.n	8002076 <HAL_TIM_PWM_Start+0xfe>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b10      	cmp	r3, #16
 8002062:	d104      	bne.n	800206e <HAL_TIM_PWM_Start+0xf6>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800206c:	e003      	b.n	8002076 <HAL_TIM_PWM_Start+0xfe>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	6839      	ldr	r1, [r7, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fefe 	bl	8002e80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a35      	ldr	r2, [pc, #212]	; (8002160 <HAL_TIM_PWM_Start+0x1e8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_TIM_PWM_Start+0x13e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a34      	ldr	r2, [pc, #208]	; (8002164 <HAL_TIM_PWM_Start+0x1ec>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00e      	beq.n	80020b6 <HAL_TIM_PWM_Start+0x13e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a32      	ldr	r2, [pc, #200]	; (8002168 <HAL_TIM_PWM_Start+0x1f0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_TIM_PWM_Start+0x13e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a31      	ldr	r2, [pc, #196]	; (800216c <HAL_TIM_PWM_Start+0x1f4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d004      	beq.n	80020b6 <HAL_TIM_PWM_Start+0x13e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a2f      	ldr	r2, [pc, #188]	; (8002170 <HAL_TIM_PWM_Start+0x1f8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_PWM_Start+0x142>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_TIM_PWM_Start+0x144>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <HAL_TIM_PWM_Start+0x1e8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01d      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e2:	d018      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a22      	ldr	r2, [pc, #136]	; (8002174 <HAL_TIM_PWM_Start+0x1fc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a21      	ldr	r2, [pc, #132]	; (8002178 <HAL_TIM_PWM_Start+0x200>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00e      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_TIM_PWM_Start+0x204>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_TIM_PWM_Start+0x1ec>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a15      	ldr	r2, [pc, #84]	; (8002168 <HAL_TIM_PWM_Start+0x1f0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d115      	bne.n	8002142 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_TIM_PWM_Start+0x208>)
 800211e:	4013      	ands	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b06      	cmp	r3, #6
 8002126:	d015      	beq.n	8002154 <HAL_TIM_PWM_Start+0x1dc>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212e:	d011      	beq.n	8002154 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002140:	e008      	b.n	8002154 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e000      	b.n	8002156 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002154:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40012c00 	.word	0x40012c00
 8002164:	40013400 	.word	0x40013400
 8002168:	40014000 	.word	0x40014000
 800216c:	40014400 	.word	0x40014400
 8002170:	40014800 	.word	0x40014800
 8002174:	40000400 	.word	0x40000400
 8002178:	40000800 	.word	0x40000800
 800217c:	40000c00 	.word	0x40000c00
 8002180:	00010007 	.word	0x00010007

08002184 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	6839      	ldr	r1, [r7, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fe72 	bl	8002e80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a3e      	ldr	r2, [pc, #248]	; (800229c <HAL_TIM_PWM_Stop+0x118>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_TIM_PWM_Stop+0x4a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a3d      	ldr	r2, [pc, #244]	; (80022a0 <HAL_TIM_PWM_Stop+0x11c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00e      	beq.n	80021ce <HAL_TIM_PWM_Stop+0x4a>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a3b      	ldr	r2, [pc, #236]	; (80022a4 <HAL_TIM_PWM_Stop+0x120>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_TIM_PWM_Stop+0x4a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a3a      	ldr	r2, [pc, #232]	; (80022a8 <HAL_TIM_PWM_Stop+0x124>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d004      	beq.n	80021ce <HAL_TIM_PWM_Stop+0x4a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a38      	ldr	r2, [pc, #224]	; (80022ac <HAL_TIM_PWM_Stop+0x128>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d101      	bne.n	80021d2 <HAL_TIM_PWM_Stop+0x4e>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_TIM_PWM_Stop+0x50>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d017      	beq.n	8002208 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	f241 1311 	movw	r3, #4369	; 0x1111
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10f      	bne.n	8002208 <HAL_TIM_PWM_Stop+0x84>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6a1a      	ldr	r2, [r3, #32]
 80021ee:	f240 4344 	movw	r3, #1092	; 0x444
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d107      	bne.n	8002208 <HAL_TIM_PWM_Stop+0x84>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002206:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10f      	bne.n	8002238 <HAL_TIM_PWM_Stop+0xb4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6a1a      	ldr	r2, [r3, #32]
 800221e:	f240 4344 	movw	r3, #1092	; 0x444
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <HAL_TIM_PWM_Stop+0xb4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d104      	bne.n	8002248 <HAL_TIM_PWM_Stop+0xc4>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002246:	e023      	b.n	8002290 <HAL_TIM_PWM_Stop+0x10c>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b04      	cmp	r3, #4
 800224c:	d104      	bne.n	8002258 <HAL_TIM_PWM_Stop+0xd4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002256:	e01b      	b.n	8002290 <HAL_TIM_PWM_Stop+0x10c>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2b08      	cmp	r3, #8
 800225c:	d104      	bne.n	8002268 <HAL_TIM_PWM_Stop+0xe4>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002266:	e013      	b.n	8002290 <HAL_TIM_PWM_Stop+0x10c>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b0c      	cmp	r3, #12
 800226c:	d104      	bne.n	8002278 <HAL_TIM_PWM_Stop+0xf4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002276:	e00b      	b.n	8002290 <HAL_TIM_PWM_Stop+0x10c>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d104      	bne.n	8002288 <HAL_TIM_PWM_Stop+0x104>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002286:	e003      	b.n	8002290 <HAL_TIM_PWM_Stop+0x10c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40012c00 	.word	0x40012c00
 80022a0:	40013400 	.word	0x40013400
 80022a4:	40014000 	.word	0x40014000
 80022a8:	40014400 	.word	0x40014400
 80022ac:	40014800 	.word	0x40014800

080022b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0ff      	b.n	80024ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b14      	cmp	r3, #20
 80022da:	f200 80f0 	bhi.w	80024be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80022de:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	08002339 	.word	0x08002339
 80022e8:	080024bf 	.word	0x080024bf
 80022ec:	080024bf 	.word	0x080024bf
 80022f0:	080024bf 	.word	0x080024bf
 80022f4:	08002379 	.word	0x08002379
 80022f8:	080024bf 	.word	0x080024bf
 80022fc:	080024bf 	.word	0x080024bf
 8002300:	080024bf 	.word	0x080024bf
 8002304:	080023bb 	.word	0x080023bb
 8002308:	080024bf 	.word	0x080024bf
 800230c:	080024bf 	.word	0x080024bf
 8002310:	080024bf 	.word	0x080024bf
 8002314:	080023fb 	.word	0x080023fb
 8002318:	080024bf 	.word	0x080024bf
 800231c:	080024bf 	.word	0x080024bf
 8002320:	080024bf 	.word	0x080024bf
 8002324:	0800243d 	.word	0x0800243d
 8002328:	080024bf 	.word	0x080024bf
 800232c:	080024bf 	.word	0x080024bf
 8002330:	080024bf 	.word	0x080024bf
 8002334:	0800247d 	.word	0x0800247d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fa2e 	bl	80027a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0208 	orr.w	r2, r2, #8
 8002352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0204 	bic.w	r2, r2, #4
 8002362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6999      	ldr	r1, [r3, #24]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	619a      	str	r2, [r3, #24]
      break;
 8002376:	e0a5      	b.n	80024c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fa9e 	bl	80028c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6999      	ldr	r1, [r3, #24]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	021a      	lsls	r2, r3, #8
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	619a      	str	r2, [r3, #24]
      break;
 80023b8:	e084      	b.n	80024c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fb07 	bl	80029d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0208 	orr.w	r2, r2, #8
 80023d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69da      	ldr	r2, [r3, #28]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0204 	bic.w	r2, r2, #4
 80023e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69d9      	ldr	r1, [r3, #28]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	61da      	str	r2, [r3, #28]
      break;
 80023f8:	e064      	b.n	80024c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fb6f 	bl	8002ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69d9      	ldr	r1, [r3, #28]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	021a      	lsls	r2, r3, #8
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	61da      	str	r2, [r3, #28]
      break;
 800243a:	e043      	b.n	80024c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fbb8 	bl	8002bb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0208 	orr.w	r2, r2, #8
 8002456:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0204 	bic.w	r2, r2, #4
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800247a:	e023      	b.n	80024c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fbfc 	bl	8002c80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002496:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	021a      	lsls	r2, r3, #8
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80024bc:	e002      	b.n	80024c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
      break;
 80024c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop

080024d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_TIM_ConfigClockSource+0x1c>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0b6      	b.n	8002662 <HAL_TIM_ConfigClockSource+0x18a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002512:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002530:	d03e      	beq.n	80025b0 <HAL_TIM_ConfigClockSource+0xd8>
 8002532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002536:	f200 8087 	bhi.w	8002648 <HAL_TIM_ConfigClockSource+0x170>
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253e:	f000 8086 	beq.w	800264e <HAL_TIM_ConfigClockSource+0x176>
 8002542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002546:	d87f      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x170>
 8002548:	2b70      	cmp	r3, #112	; 0x70
 800254a:	d01a      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0xaa>
 800254c:	2b70      	cmp	r3, #112	; 0x70
 800254e:	d87b      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x170>
 8002550:	2b60      	cmp	r3, #96	; 0x60
 8002552:	d050      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x11e>
 8002554:	2b60      	cmp	r3, #96	; 0x60
 8002556:	d877      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x170>
 8002558:	2b50      	cmp	r3, #80	; 0x50
 800255a:	d03c      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0xfe>
 800255c:	2b50      	cmp	r3, #80	; 0x50
 800255e:	d873      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x170>
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d058      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x13e>
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d86f      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x170>
 8002568:	2b30      	cmp	r3, #48	; 0x30
 800256a:	d064      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x15e>
 800256c:	2b30      	cmp	r3, #48	; 0x30
 800256e:	d86b      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x170>
 8002570:	2b20      	cmp	r3, #32
 8002572:	d060      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x15e>
 8002574:	2b20      	cmp	r3, #32
 8002576:	d867      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x170>
 8002578:	2b00      	cmp	r3, #0
 800257a:	d05c      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x15e>
 800257c:	2b10      	cmp	r3, #16
 800257e:	d05a      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x15e>
 8002580:	e062      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002592:	f000 fc55 	bl	8002e40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	609a      	str	r2, [r3, #8]
      break;
 80025ae:	e04f      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025c0:	f000 fc3e 	bl	8002e40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d2:	609a      	str	r2, [r3, #8]
      break;
 80025d4:	e03c      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e2:	461a      	mov	r2, r3
 80025e4:	f000 fbb2 	bl	8002d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2150      	movs	r1, #80	; 0x50
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fc0b 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 80025f4:	e02c      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002602:	461a      	mov	r2, r3
 8002604:	f000 fbd1 	bl	8002daa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2160      	movs	r1, #96	; 0x60
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fbfb 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002614:	e01c      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002622:	461a      	mov	r2, r3
 8002624:	f000 fb92 	bl	8002d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2140      	movs	r1, #64	; 0x40
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fbeb 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002634:	e00c      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f000 fbe2 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002646:	e003      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      break;
 800264c:	e000      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800264e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a40      	ldr	r2, [pc, #256]	; (8002780 <TIM_Base_SetConfig+0x114>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d013      	beq.n	80026ac <TIM_Base_SetConfig+0x40>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268a:	d00f      	beq.n	80026ac <TIM_Base_SetConfig+0x40>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a3d      	ldr	r2, [pc, #244]	; (8002784 <TIM_Base_SetConfig+0x118>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00b      	beq.n	80026ac <TIM_Base_SetConfig+0x40>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a3c      	ldr	r2, [pc, #240]	; (8002788 <TIM_Base_SetConfig+0x11c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d007      	beq.n	80026ac <TIM_Base_SetConfig+0x40>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3b      	ldr	r2, [pc, #236]	; (800278c <TIM_Base_SetConfig+0x120>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d003      	beq.n	80026ac <TIM_Base_SetConfig+0x40>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a3a      	ldr	r2, [pc, #232]	; (8002790 <TIM_Base_SetConfig+0x124>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d108      	bne.n	80026be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <TIM_Base_SetConfig+0x114>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01f      	beq.n	8002706 <TIM_Base_SetConfig+0x9a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026cc:	d01b      	beq.n	8002706 <TIM_Base_SetConfig+0x9a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a2c      	ldr	r2, [pc, #176]	; (8002784 <TIM_Base_SetConfig+0x118>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d017      	beq.n	8002706 <TIM_Base_SetConfig+0x9a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a2b      	ldr	r2, [pc, #172]	; (8002788 <TIM_Base_SetConfig+0x11c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <TIM_Base_SetConfig+0x9a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a2a      	ldr	r2, [pc, #168]	; (800278c <TIM_Base_SetConfig+0x120>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00f      	beq.n	8002706 <TIM_Base_SetConfig+0x9a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a29      	ldr	r2, [pc, #164]	; (8002790 <TIM_Base_SetConfig+0x124>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00b      	beq.n	8002706 <TIM_Base_SetConfig+0x9a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a28      	ldr	r2, [pc, #160]	; (8002794 <TIM_Base_SetConfig+0x128>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <TIM_Base_SetConfig+0x9a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a27      	ldr	r2, [pc, #156]	; (8002798 <TIM_Base_SetConfig+0x12c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d003      	beq.n	8002706 <TIM_Base_SetConfig+0x9a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a26      	ldr	r2, [pc, #152]	; (800279c <TIM_Base_SetConfig+0x130>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d108      	bne.n	8002718 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <TIM_Base_SetConfig+0x114>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00f      	beq.n	8002764 <TIM_Base_SetConfig+0xf8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a12      	ldr	r2, [pc, #72]	; (8002790 <TIM_Base_SetConfig+0x124>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00b      	beq.n	8002764 <TIM_Base_SetConfig+0xf8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a11      	ldr	r2, [pc, #68]	; (8002794 <TIM_Base_SetConfig+0x128>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d007      	beq.n	8002764 <TIM_Base_SetConfig+0xf8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <TIM_Base_SetConfig+0x12c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d003      	beq.n	8002764 <TIM_Base_SetConfig+0xf8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <TIM_Base_SetConfig+0x130>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d103      	bne.n	800276c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	615a      	str	r2, [r3, #20]
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40000400 	.word	0x40000400
 8002788:	40000800 	.word	0x40000800
 800278c:	40000c00 	.word	0x40000c00
 8002790:	40013400 	.word	0x40013400
 8002794:	40014000 	.word	0x40014000
 8002798:	40014400 	.word	0x40014400
 800279c:	40014800 	.word	0x40014800

080027a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f023 0201 	bic.w	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0303 	bic.w	r3, r3, #3
 80027da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f023 0302 	bic.w	r3, r3, #2
 80027ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a2c      	ldr	r2, [pc, #176]	; (80028ac <TIM_OC1_SetConfig+0x10c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00f      	beq.n	8002820 <TIM_OC1_SetConfig+0x80>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <TIM_OC1_SetConfig+0x110>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00b      	beq.n	8002820 <TIM_OC1_SetConfig+0x80>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <TIM_OC1_SetConfig+0x114>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d007      	beq.n	8002820 <TIM_OC1_SetConfig+0x80>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a29      	ldr	r2, [pc, #164]	; (80028b8 <TIM_OC1_SetConfig+0x118>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d003      	beq.n	8002820 <TIM_OC1_SetConfig+0x80>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a28      	ldr	r2, [pc, #160]	; (80028bc <TIM_OC1_SetConfig+0x11c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10c      	bne.n	800283a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0308 	bic.w	r3, r3, #8
 8002826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <TIM_OC1_SetConfig+0x10c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00f      	beq.n	8002862 <TIM_OC1_SetConfig+0xc2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <TIM_OC1_SetConfig+0x110>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00b      	beq.n	8002862 <TIM_OC1_SetConfig+0xc2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <TIM_OC1_SetConfig+0x114>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <TIM_OC1_SetConfig+0xc2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <TIM_OC1_SetConfig+0x118>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d003      	beq.n	8002862 <TIM_OC1_SetConfig+0xc2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a17      	ldr	r2, [pc, #92]	; (80028bc <TIM_OC1_SetConfig+0x11c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d111      	bne.n	8002886 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40013400 	.word	0x40013400
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40014400 	.word	0x40014400
 80028bc:	40014800 	.word	0x40014800

080028c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 0210 	bic.w	r2, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0320 	bic.w	r3, r3, #32
 800290e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a28      	ldr	r2, [pc, #160]	; (80029c0 <TIM_OC2_SetConfig+0x100>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d003      	beq.n	800292c <TIM_OC2_SetConfig+0x6c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <TIM_OC2_SetConfig+0x104>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d10d      	bne.n	8002948 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <TIM_OC2_SetConfig+0x100>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00f      	beq.n	8002970 <TIM_OC2_SetConfig+0xb0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <TIM_OC2_SetConfig+0x104>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00b      	beq.n	8002970 <TIM_OC2_SetConfig+0xb0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <TIM_OC2_SetConfig+0x108>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d007      	beq.n	8002970 <TIM_OC2_SetConfig+0xb0>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <TIM_OC2_SetConfig+0x10c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d003      	beq.n	8002970 <TIM_OC2_SetConfig+0xb0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <TIM_OC2_SetConfig+0x110>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d113      	bne.n	8002998 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800297e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	621a      	str	r2, [r3, #32]
}
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40013400 	.word	0x40013400
 80029c8:	40014000 	.word	0x40014000
 80029cc:	40014400 	.word	0x40014400
 80029d0:	40014800 	.word	0x40014800

080029d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0303 	bic.w	r3, r3, #3
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a27      	ldr	r2, [pc, #156]	; (8002ad0 <TIM_OC3_SetConfig+0xfc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_OC3_SetConfig+0x6a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a26      	ldr	r2, [pc, #152]	; (8002ad4 <TIM_OC3_SetConfig+0x100>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d10d      	bne.n	8002a5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <TIM_OC3_SetConfig+0xfc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00f      	beq.n	8002a82 <TIM_OC3_SetConfig+0xae>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <TIM_OC3_SetConfig+0x100>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00b      	beq.n	8002a82 <TIM_OC3_SetConfig+0xae>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1a      	ldr	r2, [pc, #104]	; (8002ad8 <TIM_OC3_SetConfig+0x104>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <TIM_OC3_SetConfig+0xae>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a19      	ldr	r2, [pc, #100]	; (8002adc <TIM_OC3_SetConfig+0x108>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d003      	beq.n	8002a82 <TIM_OC3_SetConfig+0xae>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <TIM_OC3_SetConfig+0x10c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d113      	bne.n	8002aaa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	621a      	str	r2, [r3, #32]
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	40013400 	.word	0x40013400
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40014400 	.word	0x40014400
 8002ae0:	40014800 	.word	0x40014800

08002ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	031b      	lsls	r3, r3, #12
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a18      	ldr	r2, [pc, #96]	; (8002ba4 <TIM_OC4_SetConfig+0xc0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00f      	beq.n	8002b68 <TIM_OC4_SetConfig+0x84>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <TIM_OC4_SetConfig+0xc4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00b      	beq.n	8002b68 <TIM_OC4_SetConfig+0x84>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a16      	ldr	r2, [pc, #88]	; (8002bac <TIM_OC4_SetConfig+0xc8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <TIM_OC4_SetConfig+0x84>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <TIM_OC4_SetConfig+0xcc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_OC4_SetConfig+0x84>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <TIM_OC4_SetConfig+0xd0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d109      	bne.n	8002b7c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	019b      	lsls	r3, r3, #6
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40013400 	.word	0x40013400
 8002bac:	40014000 	.word	0x40014000
 8002bb0:	40014400 	.word	0x40014400
 8002bb4:	40014800 	.word	0x40014800

08002bb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002bfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <TIM_OC5_SetConfig+0xb4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00f      	beq.n	8002c32 <TIM_OC5_SetConfig+0x7a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <TIM_OC5_SetConfig+0xb8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00b      	beq.n	8002c32 <TIM_OC5_SetConfig+0x7a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <TIM_OC5_SetConfig+0xbc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <TIM_OC5_SetConfig+0x7a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <TIM_OC5_SetConfig+0xc0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d003      	beq.n	8002c32 <TIM_OC5_SetConfig+0x7a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <TIM_OC5_SetConfig+0xc4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d109      	bne.n	8002c46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	621a      	str	r2, [r3, #32]
}
 8002c60:	bf00      	nop
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40013400 	.word	0x40013400
 8002c74:	40014000 	.word	0x40014000
 8002c78:	40014400 	.word	0x40014400
 8002c7c:	40014800 	.word	0x40014800

08002c80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	051b      	lsls	r3, r3, #20
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <TIM_OC6_SetConfig+0xb8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00f      	beq.n	8002cfc <TIM_OC6_SetConfig+0x7c>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <TIM_OC6_SetConfig+0xbc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <TIM_OC6_SetConfig+0x7c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <TIM_OC6_SetConfig+0xc0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d007      	beq.n	8002cfc <TIM_OC6_SetConfig+0x7c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <TIM_OC6_SetConfig+0xc4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_OC6_SetConfig+0x7c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <TIM_OC6_SetConfig+0xc8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d109      	bne.n	8002d10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	029b      	lsls	r3, r3, #10
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	621a      	str	r2, [r3, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40013400 	.word	0x40013400
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800

08002d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0201 	bic.w	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 030a 	bic.w	r3, r3, #10
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b087      	sub	sp, #28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f023 0210 	bic.w	r2, r3, #16
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	031b      	lsls	r3, r3, #12
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002de6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f043 0307 	orr.w	r3, r3, #7
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	609a      	str	r2, [r3, #8]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	021a      	lsls	r2, r3, #8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	609a      	str	r2, [r3, #8]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2201      	movs	r2, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a1a      	ldr	r2, [r3, #32]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	621a      	str	r2, [r3, #32]
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_TIMEx_PWMN_Start+0x24>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e022      	b.n	8002f36 <HAL_TIMEx_PWMN_Start+0x6a>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d109      	bne.n	8002f0a <HAL_TIMEx_PWMN_Start+0x3e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e015      	b.n	8002f36 <HAL_TIMEx_PWMN_Start+0x6a>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d109      	bne.n	8002f24 <HAL_TIMEx_PWMN_Start+0x58>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e008      	b.n	8002f36 <HAL_TIMEx_PWMN_Start+0x6a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06e      	b.n	800301c <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <HAL_TIMEx_PWMN_Start+0x82>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f4c:	e013      	b.n	8002f76 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d104      	bne.n	8002f5e <HAL_TIMEx_PWMN_Start+0x92>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f5c:	e00b      	b.n	8002f76 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d104      	bne.n	8002f6e <HAL_TIMEx_PWMN_Start+0xa2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f6c:	e003      	b.n	8002f76 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f9c2 	bl	8003308 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_TIMEx_PWMN_Start+0x158>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_TIMEx_PWMN_Start+0x10e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d018      	beq.n	8002fda <HAL_TIMEx_PWMN_Start+0x10e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <HAL_TIMEx_PWMN_Start+0x15c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_TIMEx_PWMN_Start+0x10e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1d      	ldr	r2, [pc, #116]	; (800302c <HAL_TIMEx_PWMN_Start+0x160>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_TIMEx_PWMN_Start+0x10e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <HAL_TIMEx_PWMN_Start+0x164>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_TIMEx_PWMN_Start+0x10e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <HAL_TIMEx_PWMN_Start+0x168>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_TIMEx_PWMN_Start+0x10e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_TIMEx_PWMN_Start+0x16c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d115      	bne.n	8003006 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_TIMEx_PWMN_Start+0x170>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	d015      	beq.n	8003018 <HAL_TIMEx_PWMN_Start+0x14c>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff2:	d011      	beq.n	8003018 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	e008      	b.n	8003018 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e000      	b.n	800301a <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003018:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40012c00 	.word	0x40012c00
 8003028:	40000400 	.word	0x40000400
 800302c:	40000800 	.word	0x40000800
 8003030:	40000c00 	.word	0x40000c00
 8003034:	40013400 	.word	0x40013400
 8003038:	40014000 	.word	0x40014000
 800303c:	00010007 	.word	0x00010007

08003040 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 f958 	bl	8003308 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6a1a      	ldr	r2, [r3, #32]
 800305e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10f      	bne.n	8003088 <HAL_TIMEx_PWMN_Stop+0x48>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	f240 4344 	movw	r3, #1092	; 0x444
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d107      	bne.n	8003088 <HAL_TIMEx_PWMN_Stop+0x48>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003086:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10f      	bne.n	80030b8 <HAL_TIMEx_PWMN_Stop+0x78>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a1a      	ldr	r2, [r3, #32]
 800309e:	f240 4344 	movw	r3, #1092	; 0x444
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <HAL_TIMEx_PWMN_Stop+0x78>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d104      	bne.n	80030c8 <HAL_TIMEx_PWMN_Stop+0x88>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c6:	e013      	b.n	80030f0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d104      	bne.n	80030d8 <HAL_TIMEx_PWMN_Stop+0x98>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d6:	e00b      	b.n	80030f0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d104      	bne.n	80030e8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030e6:	e003      	b.n	80030f0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003110:	2302      	movs	r3, #2
 8003112:	e068      	b.n	80031e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2e      	ldr	r2, [pc, #184]	; (80031f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2d      	ldr	r2, [pc, #180]	; (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d108      	bne.n	800315a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800314e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1e      	ldr	r2, [pc, #120]	; (80031f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01d      	beq.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003186:	d018      	beq.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00e      	beq.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d009      	beq.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10c      	bne.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40013400 	.word	0x40013400
 80031fc:	40000400 	.word	0x40000400
 8003200:	40000800 	.word	0x40000800
 8003204:	40000c00 	.word	0x40000c00
 8003208:	40014000 	.word	0x40014000

0800320c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003224:	2302      	movs	r3, #2
 8003226:	e065      	b.n	80032f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d115      	bne.n	80032e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	051b      	lsls	r3, r3, #20
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40013400 	.word	0x40013400

08003308 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	2204      	movs	r2, #4
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1a      	ldr	r2, [r3, #32]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	43db      	mvns	r3, r3
 800332a:	401a      	ands	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	621a      	str	r2, [r3, #32]
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <memset>:
 8003352:	4402      	add	r2, r0
 8003354:	4603      	mov	r3, r0
 8003356:	4293      	cmp	r3, r2
 8003358:	d100      	bne.n	800335c <memset+0xa>
 800335a:	4770      	bx	lr
 800335c:	f803 1b01 	strb.w	r1, [r3], #1
 8003360:	e7f9      	b.n	8003356 <memset+0x4>
	...

08003364 <__libc_init_array>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	4d0d      	ldr	r5, [pc, #52]	; (800339c <__libc_init_array+0x38>)
 8003368:	4c0d      	ldr	r4, [pc, #52]	; (80033a0 <__libc_init_array+0x3c>)
 800336a:	1b64      	subs	r4, r4, r5
 800336c:	10a4      	asrs	r4, r4, #2
 800336e:	2600      	movs	r6, #0
 8003370:	42a6      	cmp	r6, r4
 8003372:	d109      	bne.n	8003388 <__libc_init_array+0x24>
 8003374:	4d0b      	ldr	r5, [pc, #44]	; (80033a4 <__libc_init_array+0x40>)
 8003376:	4c0c      	ldr	r4, [pc, #48]	; (80033a8 <__libc_init_array+0x44>)
 8003378:	f000 f818 	bl	80033ac <_init>
 800337c:	1b64      	subs	r4, r4, r5
 800337e:	10a4      	asrs	r4, r4, #2
 8003380:	2600      	movs	r6, #0
 8003382:	42a6      	cmp	r6, r4
 8003384:	d105      	bne.n	8003392 <__libc_init_array+0x2e>
 8003386:	bd70      	pop	{r4, r5, r6, pc}
 8003388:	f855 3b04 	ldr.w	r3, [r5], #4
 800338c:	4798      	blx	r3
 800338e:	3601      	adds	r6, #1
 8003390:	e7ee      	b.n	8003370 <__libc_init_array+0xc>
 8003392:	f855 3b04 	ldr.w	r3, [r5], #4
 8003396:	4798      	blx	r3
 8003398:	3601      	adds	r6, #1
 800339a:	e7f2      	b.n	8003382 <__libc_init_array+0x1e>
 800339c:	08003404 	.word	0x08003404
 80033a0:	08003404 	.word	0x08003404
 80033a4:	08003404 	.word	0x08003404
 80033a8:	08003408 	.word	0x08003408

080033ac <_init>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr

080033b8 <_fini>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr
